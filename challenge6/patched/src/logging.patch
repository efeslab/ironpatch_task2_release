20,49d19
< /* The CRC functions are obtained from http://home.thep.lu.se/~bjorn/crc/ */
< uint32_t crc32_for_byte(uint32_t r) {
<     for(int j = 0; j < 8; ++j)
<         r = (r & 1? 0: (uint32_t)0xEDB88320L) ^ r >> 1;
<     return r ^ (uint32_t)0xFF000000L;
< }
< 
< 
< /**
<   * @brief  CRC32 function (used on Mblock)
<   *
<   * @param  data:  Pointer to data to be CRC'd
<   * @param  n_bytes:  Amount of bytes in the buffer to iterate over
<   * @param  crc:  CRC to store final value
<   */
< void crc32(const void *data, size_t n_bytes, unsigned char* ret_buff) {
<     uint32_t crc = 0;
<     static uint32_t table[0x100];
<     if(!*table) {
<         for(size_t i = 0; i < 0x100; ++i) {
<             table[i] = crc32_for_byte(i);
<         }
<     }
<     for(size_t i = 0; i < n_bytes; ++i) {
<         crc = table[(uint8_t)crc ^ ((uint8_t*)data)[i]] ^ crc >> 8;
<     }
<     memcpy(ret_buff, &crc, 4);
< }
< 
< 
111c81,88
<     crc32(mblock_data, mblock_size - INTEGRITY_SIZE, mblock.integrity_ptr);
---
>     unsigned int digest_length;
>     unsigned char *buffer = malloc (mblock_size);
>     digest_message(mblock_data, mblock_size - INTEGRITY_SIZE, &buffer, &digest_length);
>     if (digest_length != INTEGRITY_SIZE) {
>         handleErrors();
>     }
>     memcpy(mblock.integrity_ptr, buffer, digest_length);
>     free(buffer);
132d108
< 
