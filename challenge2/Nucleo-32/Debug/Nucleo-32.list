
Nucleo-32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048b8  080048b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b8  080048b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048bc  080048bc  000148bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000070  08004930  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004930  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c38d  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c2d  00000000  00000000  0002c425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002e058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016f87  00000000  00000000  0002f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009189  00000000  00000000  00046827  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bcd9  00000000  00000000  0004f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  000cb704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004804 	.word	0x08004804

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004804 	.word	0x08004804

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_ZN6BumperC1EP17TIM_HandleTypeDefPVm>:
 * via method calls, such as turn_signal_routine.
 */

#include "Bumper.h"

Bumper::Bumper( TIM_HandleTypeDef *hardware_timer, volatile uint32_t *timer ) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	/* Initialize all states to low/false */
	// Hardware timer reference
	hrtc_ref = hardware_timer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	601a      	str	r2, [r3, #0]
	total_time = timer;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	605a      	str	r2, [r3, #4]
	// Bumper LED States
	outer_left = inner_left = inner_right = outer_right = LOW;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	72da      	strb	r2, [r3, #11]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	7ada      	ldrb	r2, [r3, #11]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	729a      	strb	r2, [r3, #10]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	7a9a      	ldrb	r2, [r3, #10]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	725a      	strb	r2, [r3, #9]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	7a5a      	ldrb	r2, [r3, #9]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	721a      	strb	r2, [r3, #8]
	// Brake related vars
	prev_brake_state = false;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	731a      	strb	r2, [r3, #12]
	brake_state = false;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2200      	movs	r2, #0
 8000260:	735a      	strb	r2, [r3, #13]
	flash_lock = false;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	2200      	movs	r2, #0
 8000266:	739a      	strb	r2, [r3, #14]
	num_flashes = 0;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2200      	movs	r2, #0
 800026c:	615a      	str	r2, [r3, #20]
	flash_timer = 0;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
	// Turn signal vars
	need_to_signal = false;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	2200      	movs	r2, #0
 8000278:	761a      	strb	r2, [r3, #24]
	left_lock = right_lock = false;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	769a      	strb	r2, [r3, #26]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	7e9a      	ldrb	r2, [r3, #26]
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	765a      	strb	r2, [r3, #25]
	signal_timer = 0;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
	signal = 0;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	2220      	movs	r2, #32
 8000292:	2100      	movs	r1, #0
 8000294:	5499      	strb	r1, [r3, r2]
}
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b004      	add	sp, #16
 800029e:	bd80      	pop	{r7, pc}

080002a0 <_ZN6Bumper8get_timeEv>:

inline uint32_t Bumper::get_time() {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	return *total_time + __HAL_TIM_GET_COUNTER(hrtc_ref);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b6:	18d3      	adds	r3, r2, r3
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}

080002c0 <_ZN6Bumper5brakeEv>:


void Bumper::brake(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	if (brake_state) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b5b      	ldrb	r3, [r3, #13]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d022      	beq.n	8000316 <_ZN6Bumper5brakeEv+0x56>
		if (!flash_lock){ inner_left  = inner_right = HIGH; }
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	7b9b      	ldrb	r3, [r3, #14]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4053      	eors	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d006      	beq.n	80002ec <_ZN6Bumper5brakeEv+0x2c>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2201      	movs	r2, #1
 80002e2:	729a      	strb	r2, [r3, #10]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	7a9a      	ldrb	r2, [r3, #10]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	725a      	strb	r2, [r3, #9]
		if (!left_lock)    { outer_left  = HIGH; }
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7e5b      	ldrb	r3, [r3, #25]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4053      	eors	r3, r2
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d002      	beq.n	8000300 <_ZN6Bumper5brakeEv+0x40>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2201      	movs	r2, #1
 80002fe:	721a      	strb	r2, [r3, #8]
		if (!right_lock)   { outer_right = HIGH; }
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	7e9b      	ldrb	r3, [r3, #26]
 8000304:	2201      	movs	r2, #1
 8000306:	4053      	eors	r3, r2
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	d021      	beq.n	8000352 <_ZN6Bumper5brakeEv+0x92>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2201      	movs	r2, #1
 8000312:	72da      	strb	r2, [r3, #11]
		inner_left = inner_right = LOW;
		if (!left_lock)  { outer_left = LOW; }
		if (!right_lock) { outer_right = LOW; }
		num_flashes = 0;
	}
}
 8000314:	e01d      	b.n	8000352 <_ZN6Bumper5brakeEv+0x92>
		inner_left = inner_right = LOW;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	729a      	strb	r2, [r3, #10]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	7a9a      	ldrb	r2, [r3, #10]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	725a      	strb	r2, [r3, #9]
		if (!left_lock)  { outer_left = LOW; }
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	7e5b      	ldrb	r3, [r3, #25]
 8000328:	2201      	movs	r2, #1
 800032a:	4053      	eors	r3, r2
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d002      	beq.n	8000338 <_ZN6Bumper5brakeEv+0x78>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2200      	movs	r2, #0
 8000336:	721a      	strb	r2, [r3, #8]
		if (!right_lock) { outer_right = LOW; }
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7e9b      	ldrb	r3, [r3, #26]
 800033c:	2201      	movs	r2, #1
 800033e:	4053      	eors	r3, r2
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <_ZN6Bumper5brakeEv+0x8c>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	72da      	strb	r2, [r3, #11]
		num_flashes = 0;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}

0800035a <_ZN6Bumper11brake_flashEv>:

void Bumper::brake_flash(void) {
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
    if ((get_time() - flash_timer) > (TicksPerSecond/4)){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ff9b 	bl	80002a0 <_ZN6Bumper8get_timeEv>
 800036a:	0002      	movs	r2, r0
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	22f9      	movs	r2, #249	; 0xf9
 8000374:	429a      	cmp	r2, r3
 8000376:	419b      	sbcs	r3, r3
 8000378:	425b      	negs	r3, r3
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d023      	beq.n	80003c8 <_ZN6Bumper11brake_flashEv+0x6e>
        flash_timer = get_time();
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff8c 	bl	80002a0 <_ZN6Bumper8get_timeEv>
 8000388:	0002      	movs	r2, r0
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	611a      	str	r2, [r3, #16]
        inner_left = inner_right = !inner_left;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7a5b      	ldrb	r3, [r3, #9]
 8000392:	2201      	movs	r2, #1
 8000394:	4053      	eors	r3, r2
 8000396:	b2da      	uxtb	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	729a      	strb	r2, [r3, #10]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7a9a      	ldrb	r2, [r3, #10]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	725a      	strb	r2, [r3, #9]
        num_flashes++;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	1c5a      	adds	r2, r3, #1
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	615a      	str	r2, [r3, #20]
        if (num_flashes > 4) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	dd08      	ble.n	80003c8 <_ZN6Bumper11brake_flashEv+0x6e>
            //inner_left = inner_right = LOW;
            num_flashes = 0;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
            flash_lock = false;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2200      	movs	r2, #0
 80003c0:	739a      	strb	r2, [r3, #14]
            flash_timer = 0;  // in case brakes need to flash again in < flash_timer
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
        }
    }
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b002      	add	sp, #8
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <_ZN6Bumper19turn_signal_routineEv>:
 * 0010b = Right turn to be Flashing
 * 0011b to 1101b = Reserved
 * 1110b = Error (to include both left and right selected simultaneously)
 * 1111b = Not available (do not change)
 */
void Bumper::turn_signal_routine() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    if (get_time() - signal_timer > (TicksPerSecond/2)){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	0018      	movs	r0, r3
 80003dc:	f7ff ff60 	bl	80002a0 <_ZN6Bumper8get_timeEv>
 80003e0:	0002      	movs	r2, r0
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	22f4      	movs	r2, #244	; 0xf4
 80003ea:	32ff      	adds	r2, #255	; 0xff
 80003ec:	429a      	cmp	r2, r3
 80003ee:	419b      	sbcs	r3, r3
 80003f0:	425b      	negs	r3, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d050      	beq.n	800049a <_ZN6Bumper19turn_signal_routineEv+0xca>
        if (signal == 0b1110){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2220      	movs	r2, #32
 80003fc:	5c9b      	ldrb	r3, [r3, r2]
 80003fe:	2b0e      	cmp	r3, #14
 8000400:	d112      	bne.n	8000428 <_ZN6Bumper19turn_signal_routineEv+0x58>
            left_lock = right_lock = true;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2201      	movs	r2, #1
 8000406:	769a      	strb	r2, [r3, #26]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7e9a      	ldrb	r2, [r3, #26]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	765a      	strb	r2, [r3, #25]
            outer_left = outer_right = !(outer_left);  // Sync turn signals (left and right on reflect hazards)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7a1b      	ldrb	r3, [r3, #8]
 8000414:	2201      	movs	r2, #1
 8000416:	4053      	eors	r3, r2
 8000418:	b2da      	uxtb	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	72da      	strb	r2, [r3, #11]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7ada      	ldrb	r2, [r3, #11]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	721a      	strb	r2, [r3, #8]
 8000426:	e031      	b.n	800048c <_ZN6Bumper19turn_signal_routineEv+0xbc>
            // This can unfortunately induce a 1 cycle delay on the left signal in the event
            // the right signal is already on, then left signal is turned on
        }
        else if (signal == 0b0001 ){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2220      	movs	r2, #32
 800042c:	5c9b      	ldrb	r3, [r3, r2]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d10d      	bne.n	800044e <_ZN6Bumper19turn_signal_routineEv+0x7e>
            left_lock = true;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2201      	movs	r2, #1
 8000436:	765a      	strb	r2, [r3, #25]
            right_lock = false;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2200      	movs	r2, #0
 800043c:	769a      	strb	r2, [r3, #26]
            outer_left = ! outer_left;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a1b      	ldrb	r3, [r3, #8]
 8000442:	2201      	movs	r2, #1
 8000444:	4053      	eors	r3, r2
 8000446:	b2da      	uxtb	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	721a      	strb	r2, [r3, #8]
 800044c:	e01e      	b.n	800048c <_ZN6Bumper19turn_signal_routineEv+0xbc>
        }
        else if (signal == 0b0010){
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2220      	movs	r2, #32
 8000452:	5c9b      	ldrb	r3, [r3, r2]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d10d      	bne.n	8000474 <_ZN6Bumper19turn_signal_routineEv+0xa4>
            right_lock = true;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2201      	movs	r2, #1
 800045c:	769a      	strb	r2, [r3, #26]
            left_lock = false;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	765a      	strb	r2, [r3, #25]
            outer_right = ! outer_right;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7adb      	ldrb	r3, [r3, #11]
 8000468:	2201      	movs	r2, #1
 800046a:	4053      	eors	r3, r2
 800046c:	b2da      	uxtb	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	72da      	strb	r2, [r3, #11]
 8000472:	e00b      	b.n	800048c <_ZN6Bumper19turn_signal_routineEv+0xbc>
        }
        else if (signal == 0b1111) {  }  // do nothing/continue behavior, node may be down
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2220      	movs	r2, #32
 8000478:	5c9b      	ldrb	r3, [r3, r2]
 800047a:	2b0f      	cmp	r3, #15
 800047c:	d006      	beq.n	800048c <_ZN6Bumper19turn_signal_routineEv+0xbc>
        else {
        	right_lock = left_lock = false;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	765a      	strb	r2, [r3, #25]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7e5a      	ldrb	r2, [r3, #25]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	769a      	strb	r2, [r3, #26]
        }
        signal_timer = get_time();
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff ff06 	bl	80002a0 <_ZN6Bumper8get_timeEv>
 8000494:	0002      	movs	r2, r0
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	61da      	str	r2, [r3, #28]
	}
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_ZN6Bumper13brake_routineEv>:

void Bumper::brake_routine(void) {
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	if (flash_lock) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7b9b      	ldrb	r3, [r3, #14]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <_ZN6Bumper13brake_routineEv+0x18>
		brake_flash();
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	0018      	movs	r0, r3
 80004b6:	f7ff ff50 	bl	800035a <_ZN6Bumper11brake_flashEv>
	}
	brake();  // applies brakes based on state
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff feff 	bl	80002c0 <_ZN6Bumper5brakeEv>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b0ad      	sub	sp, #180	; 0xb4
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 ff15 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f90f 	bl	80006f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fbd5 	bl	8000c88 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80004de:	f000 f9cd 	bl	800087c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80004e2:	f000 fa33 	bl	800094c <_ZL12MX_TIM2_Initv>
  MX_TIM14_Init();
 80004e6:	f000 fb41 	bl	8000b6c <_ZL13MX_TIM14_Initv>
  MX_CAN_Init();
 80004ea:	f000 f949 	bl	8000780 <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 80004ee:	f000 fadb 	bl	8000aa8 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80004f2:	f000 fb95 	bl	8000c20 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  // Start up PWM Channels for bumper LEDS
  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1);
 80004f6:	4b74      	ldr	r3, [pc, #464]	; (80006c8 <main+0x1fc>)
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fae0 	bl	8002ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_2);
 8000500:	4b71      	ldr	r3, [pc, #452]	; (80006c8 <main+0x1fc>)
 8000502:	2104      	movs	r1, #4
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fadb 	bl	8002ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim14, TIM_CHANNEL_1);
 800050a:	4b70      	ldr	r3, [pc, #448]	; (80006cc <main+0x200>)
 800050c:	2100      	movs	r1, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f002 fad6 	bl	8002ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_4);
 8000514:	4b6c      	ldr	r3, [pc, #432]	; (80006c8 <main+0x1fc>)
 8000516:	210c      	movs	r1, #12
 8000518:	0018      	movs	r0, r3
 800051a:	f002 fad1 	bl	8002ac0 <HAL_TIM_PWM_Start>

  // Start hardware timers
  HAL_TIM_Base_Start_IT(&htim1);
 800051e:	4b6c      	ldr	r3, [pc, #432]	; (80006d0 <main+0x204>)
 8000520:	0018      	movs	r0, r3
 8000522:	f002 fa77 	bl	8002a14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000526:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <main+0x1fc>)
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fa73 	bl	8002a14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800052e:	4b69      	ldr	r3, [pc, #420]	; (80006d4 <main+0x208>)
 8000530:	0018      	movs	r0, r3
 8000532:	f002 fa6f 	bl	8002a14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000536:	4b65      	ldr	r3, [pc, #404]	; (80006cc <main+0x200>)
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fa6b 	bl	8002a14 <HAL_TIM_Base_Start_IT>

  // Initialize bumper
  Bumper bumper( &htim3, &second_timer ); // htim3; 1 second timer with TicksPerSecond as the counter period (manually updated localdefs.h)
 800053e:	4a66      	ldr	r2, [pc, #408]	; (80006d8 <main+0x20c>)
 8000540:	4964      	ldr	r1, [pc, #400]	; (80006d4 <main+0x208>)
 8000542:	2388      	movs	r3, #136	; 0x88
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fe6a 	bl	8000220 <_ZN6BumperC1EP17TIM_HandleTypeDefPVm>
  uint8_t RxData[8];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t perf_local_time = 0;  // variable to keep track of relative time (performance)
 800054c:	2300      	movs	r3, #0
 800054e:	22ac      	movs	r2, #172	; 0xac
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	6013      	str	r3, [r2, #0]
  char text[100] = "";           // Used in serial printing of time elapsed
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	3304      	adds	r3, #4
 800055c:	2260      	movs	r2, #96	; 0x60
 800055e:	2100      	movs	r1, #0
 8000560:	0018      	movs	r0, r3
 8000562:	f003 fd3f 	bl	8003fe4 <memset>
  // depending on configuration (minus 1 micro second for GPIO toggle). This was measured
  // by toggling a pin High and then low before and after function execution. A timer
  // was later used for ease of use in case an oscilloscope was not available.
  while (1)
  {
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0){  // Check CAN FiFo mailbox
 8000566:	4b5d      	ldr	r3, [pc, #372]	; (80006dc <main+0x210>)
 8000568:	2100      	movs	r1, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fa7e 	bl	8001a6c <HAL_CAN_GetRxFifoFillLevel>
 8000570:	0003      	movs	r3, r0
 8000572:	1e5a      	subs	r2, r3, #1
 8000574:	4193      	sbcs	r3, r2
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d070      	beq.n	800065e <main+0x192>
		// get the first frame in the queue
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800057c:	2364      	movs	r3, #100	; 0x64
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	246c      	movs	r4, #108	; 0x6c
 8000582:	193a      	adds	r2, r7, r4
 8000584:	4855      	ldr	r0, [pc, #340]	; (80006dc <main+0x210>)
 8000586:	2100      	movs	r1, #0
 8000588:	f001 f954 	bl	8001834 <HAL_CAN_GetRxMessage>
		// Toggle RED LED on board
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fcf9 	bl	8001f8a <HAL_GPIO_TogglePin>

		// Check PGN value in EXT ID portion of header
		if (((RxHeader.ExtId >> 8) & 0x7FFFF) == PGN_CruiseControlVehicleSpeed1 ){
 8000598:	193b      	adds	r3, r7, r4
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	035b      	lsls	r3, r3, #13
 80005a0:	0b5b      	lsrs	r3, r3, #13
 80005a2:	4a4f      	ldr	r2, [pc, #316]	; (80006e0 <main+0x214>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d128      	bne.n	80005fa <main+0x12e>
			perf_local_time = perf_time + __HAL_TIM_GET_COUNTER(&htim1);
 80005a8:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <main+0x204>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ae:	4b4d      	ldr	r3, [pc, #308]	; (80006e4 <main+0x218>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	18d3      	adds	r3, r2, r3
 80005b4:	24ac      	movs	r4, #172	; 0xac
 80005b6:	193a      	adds	r2, r7, r4
 80005b8:	6013      	str	r3, [r2, #0]

			rx_brake_routine(RxData, &bumper);
 80005ba:	2388      	movs	r3, #136	; 0x88
 80005bc:	18fa      	adds	r2, r7, r3
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 fbcf 	bl	8000d68 <_Z16rx_brake_routinePhP6Bumper>

			perf_local_time = (perf_time + __HAL_TIM_GET_COUNTER(&htim1)) - perf_local_time;
 80005ca:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <main+0x204>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d0:	4b44      	ldr	r3, [pc, #272]	; (80006e4 <main+0x218>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	18d2      	adds	r2, r2, r3
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	193a      	adds	r2, r7, r4
 80005de:	6013      	str	r3, [r2, #0]
			sprintf(text, "rx_brake_routine=%lu\r\n", (unsigned long)perf_local_time);
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4940      	ldr	r1, [pc, #256]	; (80006e8 <main+0x21c>)
 80005e6:	003b      	movs	r3, r7
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 fd03 	bl	8003ff4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)text, sizeof(text), 20);
 80005ee:	0039      	movs	r1, r7
 80005f0:	483e      	ldr	r0, [pc, #248]	; (80006ec <main+0x220>)
 80005f2:	2314      	movs	r3, #20
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	f003 f925 	bl	8003844 <HAL_UART_Transmit>
		}

		if (((RxHeader.ExtId >> 8) & 0x7FFFF) == PGN_OperatorsExternalLightControls){
 80005fa:	236c      	movs	r3, #108	; 0x6c
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	035b      	lsls	r3, r3, #13
 8000604:	0b5b      	lsrs	r3, r3, #13
 8000606:	4a3a      	ldr	r2, [pc, #232]	; (80006f0 <main+0x224>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d128      	bne.n	800065e <main+0x192>
			perf_local_time = perf_time + __HAL_TIM_GET_COUNTER(&htim1);
 800060c:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <main+0x204>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000612:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <main+0x218>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	18d3      	adds	r3, r2, r3
 8000618:	24ac      	movs	r4, #172	; 0xac
 800061a:	193a      	adds	r2, r7, r4
 800061c:	6013      	str	r3, [r2, #0]

			rx_signal_routine(RxData, &bumper);
 800061e:	2388      	movs	r3, #136	; 0x88
 8000620:	18fa      	adds	r2, r7, r3
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fbe5 	bl	8000df8 <_Z17rx_signal_routinePhP6Bumper>

			perf_local_time = (perf_time + __HAL_TIM_GET_COUNTER(&htim1)) - perf_local_time;
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <main+0x204>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0x218>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	18d2      	adds	r2, r2, r3
 800063a:	193b      	adds	r3, r7, r4
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	193a      	adds	r2, r7, r4
 8000642:	6013      	str	r3, [r2, #0]
			sprintf(text, "rx_signal_routine=%lu\r\n", (unsigned long)perf_local_time);
 8000644:	193b      	adds	r3, r7, r4
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	492a      	ldr	r1, [pc, #168]	; (80006f4 <main+0x228>)
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fcd1 	bl	8003ff4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)text, sizeof(text), 20);
 8000652:	0039      	movs	r1, r7
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <main+0x220>)
 8000656:	2314      	movs	r3, #20
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	f003 f8f3 	bl	8003844 <HAL_UART_Transmit>
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // run bumper update routines. These update LED states based on bumper state.
	  bumper.turn_signal_routine();
 800065e:	2488      	movs	r4, #136	; 0x88
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff feb4 	bl	80003d0 <_ZN6Bumper19turn_signal_routineEv>
	  bumper.brake_routine();
 8000668:	193b      	adds	r3, r7, r4
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff19 	bl	80004a2 <_ZN6Bumper13brake_routineEv>

	  // Change PWM compare registers in relation to bumper state
	  htim2.Instance->CCR1 = (bumper.outer_left) ? PWM_HIGH : PWM_LOW;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	7a1b      	ldrb	r3, [r3, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x1b0>
 8000678:	2214      	movs	r2, #20
 800067a:	e000      	b.n	800067e <main+0x1b2>
 800067c:	2201      	movs	r2, #1
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <main+0x1fc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
	  htim2.Instance->CCR2 = (bumper.inner_left) ? PWM_HIGH : PWM_LOW;
 8000684:	2388      	movs	r3, #136	; 0x88
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	7a5b      	ldrb	r3, [r3, #9]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <main+0x1c6>
 800068e:	2214      	movs	r2, #20
 8000690:	e000      	b.n	8000694 <main+0x1c8>
 8000692:	2201      	movs	r2, #1
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <main+0x1fc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance->CCR4 = (bumper.inner_right) ? PWM_HIGH : PWM_LOW;
 800069a:	2388      	movs	r3, #136	; 0x88
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	7a9b      	ldrb	r3, [r3, #10]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x1dc>
 80006a4:	2214      	movs	r2, #20
 80006a6:	e000      	b.n	80006aa <main+0x1de>
 80006a8:	2201      	movs	r2, #1
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <main+0x1fc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	641a      	str	r2, [r3, #64]	; 0x40
	  htim14.Instance->CCR1 = (bumper.outer_right) ? PWM_HIGH : PWM_LOW;
 80006b0:	2388      	movs	r3, #136	; 0x88
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	7adb      	ldrb	r3, [r3, #11]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <main+0x1f2>
 80006ba:	2214      	movs	r2, #20
 80006bc:	e000      	b.n	80006c0 <main+0x1f4>
 80006be:	2201      	movs	r2, #1
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <main+0x200>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0){  // Check CAN FiFo mailbox
 80006c6:	e74e      	b.n	8000566 <main+0x9a>
 80006c8:	200000f4 	.word	0x200000f4
 80006cc:	20000174 	.word	0x20000174
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	20000134 	.word	0x20000134
 80006d8:	20000234 	.word	0x20000234
 80006dc:	2000008c 	.word	0x2000008c
 80006e0:	0000fef1 	.word	0x0000fef1
 80006e4:	20000238 	.word	0x20000238
 80006e8:	0800481c 	.word	0x0800481c
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	0000fdcc 	.word	0x0000fdcc
 80006f4:	08004834 	.word	0x08004834

080006f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b093      	sub	sp, #76	; 0x4c
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	2414      	movs	r4, #20
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2334      	movs	r3, #52	; 0x34
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f003 fc6b 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	2310      	movs	r3, #16
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f003 fc64 	bl	8003fe4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2220      	movs	r2, #32
 8000720:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	193b      	adds	r3, r7, r4
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fc45 	bl	8001fc0 <HAL_RCC_OscConfig>
 8000736:	0003      	movs	r3, r0
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	4193      	sbcs	r3, r2
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_Z18SystemClock_Configv+0x4e>
  {
    Error_Handler();
 8000742:	f000 fb9b 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2203      	movs	r2, #3
 8000750:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2101      	movs	r1, #1
 8000762:	0018      	movs	r0, r3
 8000764:	f001 ffb2 	bl	80026cc <HAL_RCC_ClockConfig>
 8000768:	0003      	movs	r3, r0
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	4193      	sbcs	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <_Z18SystemClock_Configv+0x80>
  {
    Error_Handler();
 8000774:	f000 fb82 	bl	8000e7c <Error_Handler>
  }
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b013      	add	sp, #76	; 0x4c
 800077e:	bd90      	pop	{r4, r7, pc}

08000780 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 8000788:	4a3b      	ldr	r2, [pc, #236]	; (8000878 <_ZL11MX_CAN_Initv+0xf8>)
 800078a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 800078e:	220c      	movs	r2, #12
 8000790:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000798:	4b36      	ldr	r3, [pc, #216]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0452      	lsls	r2, r2, #17
 800079e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80007a0:	4b34      	ldr	r3, [pc, #208]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	0312      	lsls	r2, r2, #12
 80007a6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0352      	lsls	r2, r2, #13
 80007ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007bc:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007c2:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007c8:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fdf6 	bl	80013c8 <HAL_CAN_Init>
 80007dc:	0003      	movs	r3, r0
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	4193      	sbcs	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 80007e8:	f000 fb48 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // Create and start CAN filter, start up CAN
  CAN_FilterTypeDef sFilterConfig = {0};
 80007ec:	003b      	movs	r3, r7
 80007ee:	0018      	movs	r0, r3
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 fbf5 	bl	8003fe4 <memset>
  sFilterConfig.FilterBank = 0;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000800:	003b      	movs	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000806:	003b      	movs	r3, r7
 8000808:	2201      	movs	r2, #1
 800080a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800080c:	003b      	movs	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000812:	003b      	movs	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000818:	003b      	movs	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800081e:	003b      	movs	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000824:	003b      	movs	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800082a:	003b      	movs	r3, r7
 800082c:	2201      	movs	r2, #1
 800082e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000830:	003b      	movs	r3, r7
 8000832:	220e      	movs	r2, #14
 8000834:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000836:	003a      	movs	r2, r7
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fec1 	bl	80015c4 <HAL_CAN_ConfigFilter>
 8000842:	0003      	movs	r3, r0
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4193      	sbcs	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <_ZL11MX_CAN_Initv+0xd2>
	  Error_Handler();
 800084e:	f000 fb15 	bl	8000e7c <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_ZL11MX_CAN_Initv+0xf4>)
 8000854:	0018      	movs	r0, r3
 8000856:	f000 ffa7 	bl	80017a8 <HAL_CAN_Start>
 800085a:	0003      	movs	r3, r0
 800085c:	1e5a      	subs	r2, r3, #1
 800085e:	4193      	sbcs	r3, r2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_ZL11MX_CAN_Initv+0xea>
	  Error_Handler();
 8000866:	f000 fb09 	bl	8000e7c <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b00a      	add	sp, #40	; 0x28
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	2000008c 	.word	0x2000008c
 8000878:	40006400 	.word	0x40006400

0800087c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
	 * This timer is used for the high precision performance metrics
	 * There is no prescaling done, and the period is the max allowed
	 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	2308      	movs	r3, #8
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2310      	movs	r3, #16
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 fba9 	bl	8003fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	2308      	movs	r3, #8
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 fba2 	bl	8003fe4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008a2:	4a28      	ldr	r2, [pc, #160]	; (8000944 <_ZL12MX_TIM1_Initv+0xc8>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <_ZL12MX_TIM1_Initv+0xcc>)
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f002 f875 	bl	80029bc <HAL_TIM_Base_Init>
 80008d2:	0003      	movs	r3, r0
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	4193      	sbcs	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_ZL12MX_TIM1_Initv+0x66>
  {
    Error_Handler();
 80008de:	f000 facd 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	2108      	movs	r1, #8
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0152      	lsls	r2, r2, #5
 80008ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008ec:	187a      	adds	r2, r7, r1
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f002 faf8 	bl	8002ee8 <HAL_TIM_ConfigClockSource>
 80008f8:	0003      	movs	r3, r0
 80008fa:	1e5a      	subs	r2, r3, #1
 80008fc:	4193      	sbcs	r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000904:	f000 faba 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000908:	003b      	movs	r3, r7
 800090a:	2220      	movs	r2, #32
 800090c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000914:	003a      	movs	r2, r7
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fed6 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	0003      	movs	r3, r0
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	4193      	sbcs	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 800092c:	f000 faa6 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <_ZL12MX_TIM1_Initv+0xc4>)
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fb86 	bl	8001044 <HAL_TIM_MspPostInit>

  /* USER CODE END TIM1_Init 2 */

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b006      	add	sp, #24
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000b4 	.word	0x200000b4
 8000944:	40012c00 	.word	0x40012c00
 8000948:	0000ffff 	.word	0x0000ffff

0800094c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
	/*
	 * PWM Channel timer for the first 3 LEDs
	 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	2328      	movs	r3, #40	; 0x28
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	0018      	movs	r0, r3
 8000958:	2310      	movs	r3, #16
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f003 fb41 	bl	8003fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	2320      	movs	r3, #32
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	0018      	movs	r0, r3
 8000968:	2308      	movs	r3, #8
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fb39 	bl	8003fe4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	0018      	movs	r0, r3
 8000976:	231c      	movs	r3, #28
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f003 fb32 	bl	8003fe4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000980:	4b48      	ldr	r3, [pc, #288]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	05d2      	lsls	r2, r2, #23
 8000986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000988:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000996:	2264      	movs	r2, #100	; 0x64
 8000998:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 f807 	bl	80029bc <HAL_TIM_Base_Init>
 80009ae:	0003      	movs	r3, r0
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	4193      	sbcs	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80009ba:	f000 fa5f 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	2128      	movs	r1, #40	; 0x28
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	0152      	lsls	r2, r2, #5
 80009c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 fa8a 	bl	8002ee8 <HAL_TIM_ConfigClockSource>
 80009d4:	0003      	movs	r3, r0
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	4193      	sbcs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80009e0:	f000 fa4c 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f836 	bl	8002a58 <HAL_TIM_PWM_Init>
 80009ec:	0003      	movs	r3, r0
 80009ee:	1e5a      	subs	r2, r3, #1
 80009f0:	4193      	sbcs	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80009f8:	f000 fa40 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2120      	movs	r1, #32
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0a:	187a      	adds	r2, r7, r1
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a0e:	0011      	movs	r1, r2
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fe5b 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	0003      	movs	r3, r0
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4193      	sbcs	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000a22:	f000 fa2b 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2260      	movs	r2, #96	; 0x60
 8000a2a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3e:	1d39      	adds	r1, r7, #4
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 f997 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	4193      	sbcs	r3, r2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8000a56:	f000 fa11 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5a:	1d39      	adds	r1, r7, #4
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 f989 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	0003      	movs	r3, r0
 8000a68:	1e5a      	subs	r2, r3, #1
 8000a6a:	4193      	sbcs	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 8000a72:	f000 fa03 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a76:	1d39      	adds	r1, r7, #4
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 f97b 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	0003      	movs	r3, r0
 8000a84:	1e5a      	subs	r2, r3, #1
 8000a86:	4193      	sbcs	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 8000a8e:	f000 f9f5 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <_ZL12MX_TIM2_Initv+0x158>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 fad5 	bl	8001044 <HAL_TIM_MspPostInit>

}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b00e      	add	sp, #56	; 0x38
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	200000f4 	.word	0x200000f4

08000aa8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
	 * This timer is used so brake and turn signal flashing flash
	 * at and for the appropriate length of time.
	 */
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	2308      	movs	r3, #8
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f003 fa93 	bl	8003fe4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abe:	003b      	movs	r3, r7
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 fa8c 	bl	8003fe4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <_ZL12MX_TIM3_Initv+0xbc>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ad4:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <_ZL12MX_TIM3_Initv+0xc0>)
 8000ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ae0:	22fa      	movs	r2, #250	; 0xfa
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 ff61 	bl	80029bc <HAL_TIM_Base_Init>
 8000afa:	0003      	movs	r3, r0
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	4193      	sbcs	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8000b06:	f000 f9b9 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0152      	lsls	r2, r2, #5
 8000b12:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b14:	187a      	adds	r2, r7, r1
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 f9e4 	bl	8002ee8 <HAL_TIM_ConfigClockSource>
 8000b20:	0003      	movs	r3, r0
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	4193      	sbcs	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8000b2c:	f000 f9a6 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3c:	003a      	movs	r2, r7
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_ZL12MX_TIM3_Initv+0xb8>)
 8000b40:	0011      	movs	r1, r2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 fdc2 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	4193      	sbcs	r3, r2
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000b54:	f000 f992 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b006      	add	sp, #24
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000134 	.word	0x20000134
 8000b64:	40000400 	.word	0x40000400
 8000b68:	0000bb80 	.word	0x0000bb80

08000b6c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
	 * Timer channel used for the 4th LED,
	 * configured the same as TIM2.
	 */
  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	0018      	movs	r0, r3
 8000b76:	231c      	movs	r3, #28
 8000b78:	001a      	movs	r2, r3
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f003 fa32 	bl	8003fe4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <_ZL13MX_TIM14_Initv+0xb0>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000b94:	2264      	movs	r2, #100	; 0x64
 8000b96:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f001 ff08 	bl	80029bc <HAL_TIM_Base_Init>
 8000bac:	0003      	movs	r3, r0
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	4193      	sbcs	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <_ZL13MX_TIM14_Initv+0x50>
  {
    Error_Handler();
 8000bb8:	f000 f960 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 ff4a 	bl	8002a58 <HAL_TIM_PWM_Init>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	4193      	sbcs	r3, r2
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <_ZL13MX_TIM14_Initv+0x68>
  {
    Error_Handler();
 8000bd0:	f000 f954 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2260      	movs	r2, #96	; 0x60
 8000bd8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bec:	1d39      	adds	r1, r7, #4
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 f8c0 	bl	8002d78 <HAL_TIM_PWM_ConfigChannel>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	4193      	sbcs	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <_ZL13MX_TIM14_Initv+0x9c>
  {
    Error_Handler();
 8000c04:	f000 f93a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <_ZL13MX_TIM14_Initv+0xac>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 fa1a 	bl	8001044 <HAL_TIM_MspPostInit>

}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b008      	add	sp, #32
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000174 	.word	0x20000174
 8000c1c:	40002000 	.word	0x40002000

08000c20 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c2c:	2296      	movs	r2, #150	; 0x96
 8000c2e:	0212      	lsls	r2, r2, #8
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 fd99 	bl	800379c <HAL_UART_Init>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	4193      	sbcs	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000c76:	f000 f901 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200001b4 	.word	0x200001b4
 8000c84:	40004400 	.word	0x40004400

08000c88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	240c      	movs	r4, #12
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	0018      	movs	r0, r3
 8000c94:	2314      	movs	r3, #20
 8000c96:	001a      	movs	r2, r3
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f003 f9a3 	bl	8003fe4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	03c9      	lsls	r1, r1, #15
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	03db      	lsls	r3, r3, #15
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0289      	lsls	r1, r1, #10
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	029b      	lsls	r3, r3, #10
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	02c9      	lsls	r1, r1, #11
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	02db      	lsls	r3, r3, #11
 8000cec:	4013      	ands	r3, r2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cf2:	2390      	movs	r3, #144	; 0x90
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21c0      	movs	r1, #192	; 0xc0
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 f928 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <_ZL12MX_GPIO_Initv+0xdc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 f922 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	22c0      	movs	r2, #192	; 0xc0
 8000d10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2201      	movs	r2, #1
 8000d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	193a      	adds	r2, r7, r4
 8000d26:	2390      	movs	r3, #144	; 0x90
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 ffa7 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d32:	0021      	movs	r1, r4
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2208      	movs	r2, #8
 8000d38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_ZL12MX_GPIO_Initv+0xdc>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f000 ff94 	bl	8001c80 <HAL_GPIO_Init>

}
 8000d58:	46c0      	nop			; (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b009      	add	sp, #36	; 0x24
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400

08000d68 <_Z16rx_brake_routinePhP6Bumper>:
  *
  * @param  buff: The buffer containing the CAN data
  * @param  bumper: The bumper class to be updated
  * @retval None
  */
void rx_brake_routine( unsigned char buff[], Bumper *bumper ){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	int16_t speed_value;  // vulnerability here
	uint8_t brake_switch;
	// Extract Speed and brake switch from frame
	speed_value  = (buff[3] << 8) + buff[2];  // buf[3] = speed integer, buf[2] = speed decimal
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3303      	adds	r3, #3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3302      	adds	r3, #2
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	230e      	movs	r3, #14
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	801a      	strh	r2, [r3, #0]
	brake_switch = (buff[4] & 0b00001100) >> 2;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3304      	adds	r3, #4
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	109b      	asrs	r3, r3, #2
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	210d      	movs	r1, #13
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	// update related bumper members
	bumper->brake_state = (brake_switch) ? true : false;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	4193      	sbcs	r3, r2
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	735a      	strb	r2, [r3, #13]

	// This segment would ideally be moved to bumper method
	if (bumper->brake_state) {
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	7b5b      	ldrb	r3, [r3, #13]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d012      	beq.n	8000de2 <_Z16rx_brake_routinePhP6Bumper+0x7a>
		if ((speed_value > 0) && (bumper->prev_brake_state != bumper->brake_state)){  // speed > 0 and brakes were off last
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	5e9b      	ldrsh	r3, [r3, r2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dd0f      	ble.n	8000de8 <_Z16rx_brake_routinePhP6Bumper+0x80>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	7b1a      	ldrb	r2, [r3, #12]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	7b5b      	ldrb	r3, [r3, #13]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d009      	beq.n	8000de8 <_Z16rx_brake_routinePhP6Bumper+0x80>
			bumper->flash_lock = true;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	739a      	strb	r2, [r3, #14]
			bumper->flash_timer = 0;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	e002      	b.n	8000de8 <_Z16rx_brake_routinePhP6Bumper+0x80>
		}
	}
	else {
		bumper->flash_lock = false;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	739a      	strb	r2, [r3, #14]
	}
	bumper->prev_brake_state = bumper->brake_state;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	7b5a      	ldrb	r2, [r3, #13]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	731a      	strb	r2, [r3, #12]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <_Z17rx_signal_routinePhP6Bumper>:
  *
  * @param  buff: The buffer containing the CAN data
  * @param  bumper: The bumper class to be updated
  * @retval None
  */
inline void rx_signal_routine( unsigned char buff[], Bumper *bumper ) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	bumper->signal = (buff[1] >>4);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	111b      	asrs	r3, r3, #4
 8000e0a:	b2d9      	uxtb	r1, r3
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2220      	movs	r2, #32
 8000e10:	5499      	strb	r1, [r3, r2]
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  *
  * @param  *htim: The hardware timer responsible for calling this interrupt
  * @retval None
  *
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d10b      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x28>
		second_timer += TicksPerSecond;  // Current timer (prescale 480, period of 100,000 gives ~12 hours before int overflow)
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e32:	189a      	adds	r2, r3, r2
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e36:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f8a4 	bl	8001f8a <HAL_GPIO_TogglePin>
	}
	else if (htim == &htim1){  // Performance timer, used for high precision
		perf_time += 65535;  // will overflow after the 2^16 interrupt, ~6 minutes until overflow
	}
}
 8000e42:	e009      	b.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if (htim == &htim1){  // Performance timer, used for high precision
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d105      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x3c>
		perf_time += 65535;  // will overflow after the 2^16 interrupt, ~6 minutes until overflow
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e52:	189a      	adds	r2, r3, r2
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000134 	.word	0x20000134
 8000e64:	20000234 	.word	0x20000234
 8000e68:	000003e7 	.word	0x000003e7
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	200000b4 	.word	0x200000b4
 8000e74:	20000238 	.word	0x20000238
 8000e78:	0000ffff 	.word	0x0000ffff

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_MspInit+0x44>)
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_MspInit+0x44>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	619a      	str	r2, [r3, #24]
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_MspInit+0x44>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_MspInit+0x44>)
 8000ea8:	69da      	ldr	r2, [r3, #28]
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_MspInit+0x44>)
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0549      	lsls	r1, r1, #21
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	61da      	str	r2, [r3, #28]
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_MspInit+0x44>)
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	055b      	lsls	r3, r3, #21
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b002      	add	sp, #8
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2314      	movs	r3, #20
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 f87e 	bl	8003fe4 <memset>
  if(hcan->Instance==CAN)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_CAN_MspInit+0x94>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d133      	bne.n	8000f5a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0489      	lsls	r1, r1, #18
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	049b      	lsls	r3, r3, #18
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0289      	lsls	r1, r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2a:	2114      	movs	r1, #20
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	22c0      	movs	r2, #192	; 0xc0
 8000f30:	0152      	lsls	r2, r2, #5
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2202      	movs	r2, #2
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2203      	movs	r2, #3
 8000f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2204      	movs	r2, #4
 8000f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	187a      	adds	r2, r7, r1
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fe93 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b00a      	add	sp, #40	; 0x28
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40006400 	.word	0x40006400
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a2e      	ldr	r2, [pc, #184]	; (8001034 <HAL_TIM_Base_MspInit+0xc8>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d116      	bne.n	8000fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000f80:	699a      	ldr	r2, [r3, #24]
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0109      	lsls	r1, r1, #4
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200d      	movs	r0, #13
 8000fa0:	f000 fe3c 	bl	8001c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000fa4:	200d      	movs	r0, #13
 8000fa6:	f000 fe4e 	bl	8001c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000faa:	e03f      	b.n	800102c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d10c      	bne.n	8000fd2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fba:	69da      	ldr	r2, [r3, #28]
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	61da      	str	r2, [r3, #28]
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
}
 8000fd0:	e02c      	b.n	800102c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_TIM_Base_MspInit+0xd0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d114      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fde:	69da      	ldr	r2, [r3, #28]
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	61da      	str	r2, [r3, #28]
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f000 fe0f 	bl	8001c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ffe:	2010      	movs	r0, #16
 8001000:	f000 fe21 	bl	8001c46 <HAL_NVIC_EnableIRQ>
}
 8001004:	e012      	b.n	800102c <HAL_TIM_Base_MspInit+0xc0>
  else if(htim_base->Instance==TIM14)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_TIM_Base_MspInit+0xd4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d10d      	bne.n	800102c <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	0049      	lsls	r1, r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	61da      	str	r2, [r3, #28]
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_TIM_Base_MspInit+0xcc>)
 8001020:	69da      	ldr	r2, [r3, #28]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4013      	ands	r3, r2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b006      	add	sp, #24
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40000400 	.word	0x40000400
 8001040:	40002000 	.word	0x40002000

08001044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	2314      	movs	r3, #20
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f002 ffc4 	bl	8003fe4 <memset>
  if(htim->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	429a      	cmp	r2, r3
 8001066:	d125      	bne.n	80010b4 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0289      	lsls	r1, r1, #10
 8001072:	430a      	orrs	r2, r1
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001084:	2114      	movs	r1, #20
 8001086:	187b      	adds	r3, r7, r1
 8001088:	220b      	movs	r2, #11
 800108a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2202      	movs	r2, #2
 8001090:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2202      	movs	r2, #2
 80010a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	187a      	adds	r2, r7, r1
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f000 fde7 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80010b2:	e029      	b.n	8001108 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM14)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_TIM_MspPostInit+0xd0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d124      	bne.n	8001108 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 80010c4:	2180      	movs	r1, #128	; 0x80
 80010c6:	0289      	lsls	r1, r1, #10
 80010c8:	430a      	orrs	r2, r1
 80010ca:	615a      	str	r2, [r3, #20]
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_TIM_MspPostInit+0xcc>)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010da:	2114      	movs	r1, #20
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2210      	movs	r2, #16
 80010e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2202      	movs	r2, #2
 80010e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	187a      	adds	r2, r7, r1
 80010fc:	2390      	movs	r3, #144	; 0x90
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	0011      	movs	r1, r2
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fdbc 	bl	8001c80 <HAL_GPIO_Init>
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b00a      	add	sp, #40	; 0x28
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	40002000 	.word	0x40002000

08001118 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	2314      	movs	r3, #20
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	0018      	movs	r0, r3
 8001126:	2314      	movs	r3, #20
 8001128:	001a      	movs	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	f002 ff5a 	bl	8003fe4 <memset>
  if(huart->Instance==USART2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_UART_MspInit+0x90>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d132      	bne.n	80011a0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_UART_MspInit+0x94>)
 800113c:	69da      	ldr	r2, [r3, #28]
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_UART_MspInit+0x94>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0289      	lsls	r1, r1, #10
 8001144:	430a      	orrs	r2, r1
 8001146:	61da      	str	r2, [r3, #28]
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_UART_MspInit+0x94>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0x94>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_UART_MspInit+0x94>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	0289      	lsls	r1, r1, #10
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0x94>)
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001172:	2114      	movs	r1, #20
 8001174:	187b      	adds	r3, r7, r1
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x98>)
 8001178:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2202      	movs	r2, #2
 800117e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2203      	movs	r2, #3
 800118a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2201      	movs	r2, #1
 8001190:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	187a      	adds	r2, r7, r1
 8001194:	2390      	movs	r3, #144	; 0x90
 8001196:	05db      	lsls	r3, r3, #23
 8001198:	0011      	movs	r1, r2
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fd70 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b00a      	add	sp, #40	; 0x28
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40004400 	.word	0x40004400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	00008004 	.word	0x00008004

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011dc:	f000 f8d8 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f001 fcac 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	200000b4 	.word	0x200000b4

08001200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <TIM3_IRQHandler+0x14>)
 8001206:	0018      	movs	r0, r3
 8001208:	f001 fca0 	bl	8002b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000134 	.word	0x20000134

08001218 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x50>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x16>
		heap_end = &end;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <_sbrk+0x50>)
 800122a:	4a10      	ldr	r2, [pc, #64]	; (800126c <_sbrk+0x54>)
 800122c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <_sbrk+0x50>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <_sbrk+0x50>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	466a      	mov	r2, sp
 800123e:	4293      	cmp	r3, r2
 8001240:	d907      	bls.n	8001252 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001242:	f002 fea5 	bl	8003f90 <__errno>
 8001246:	0003      	movs	r3, r0
 8001248:	220c      	movs	r2, #12
 800124a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800124c:	2301      	movs	r3, #1
 800124e:	425b      	negs	r3, r3
 8001250:	e006      	b.n	8001260 <_sbrk+0x48>
	}

	heap_end += incr;
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <_sbrk+0x50>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	18d2      	adds	r2, r2, r3
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_sbrk+0x50>)
 800125c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b004      	add	sp, #16
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000023c 	.word	0x2000023c
 800126c:	20000250 	.word	0x20000250

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <LoopForever+0x6>)
    LDR R1, [R0]
 8001282:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001284:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001286:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <LoopForever+0xa>)
    CMP R1, R2
 8001288:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800128a:	d105      	bne.n	8001298 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800128e:	4913      	ldr	r1, [pc, #76]	; (80012dc <LoopForever+0x12>)
    STR R1, [R0]
 8001290:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001292:	4813      	ldr	r0, [pc, #76]	; (80012e0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001294:	4913      	ldr	r1, [pc, #76]	; (80012e4 <LoopForever+0x1a>)
    STR R1, [R0]
 8001296:	6001      	str	r1, [r0, #0]

08001298 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <LoopForever+0x1e>)
  ldr r1, =_edata
 800129a:	4914      	ldr	r1, [pc, #80]	; (80012ec <LoopForever+0x22>)
  ldr r2, =_sidata
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <LoopForever+0x26>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80012b0:	4c11      	ldr	r4, [pc, #68]	; (80012f8 <LoopForever+0x2e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012be:	f7ff ffd7 	bl	8001270 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012c2:	f002 fe6b 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff f901 	bl	80004cc <main>

080012ca <LoopForever>:

LoopForever:
    b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   r0, =_estack
 80012cc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80012d0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80012d4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80012d8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80012dc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80012e0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80012e4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012f0:	080048c0 	.word	0x080048c0
  ldr r2, =_sbss
 80012f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f8:	20000250 	.word	0x20000250

080012fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_IRQHandler>
	...

08001300 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_Init+0x24>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_Init+0x24>)
 800130a:	2110      	movs	r1, #16
 800130c:	430a      	orrs	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f809 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001316:	f7ff fdb7 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_InitTick+0x5c>)
 8001332:	681c      	ldr	r4, [r3, #0]
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_InitTick+0x60>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	0019      	movs	r1, r3
 800133a:	23fa      	movs	r3, #250	; 0xfa
 800133c:	0098      	lsls	r0, r3, #2
 800133e:	f7fe fee3 	bl	8000108 <__udivsi3>
 8001342:	0003      	movs	r3, r0
 8001344:	0019      	movs	r1, r3
 8001346:	0020      	movs	r0, r4
 8001348:	f7fe fede 	bl	8000108 <__udivsi3>
 800134c:	0003      	movs	r3, r0
 800134e:	0018      	movs	r0, r3
 8001350:	f000 fc89 	bl	8001c66 <HAL_SYSTICK_Config>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00f      	b.n	800137c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d80b      	bhi.n	800137a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2301      	movs	r3, #1
 8001366:	425b      	negs	r3, r3
 8001368:	2200      	movs	r2, #0
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fc56 	bl	8001c1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_InitTick+0x64>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b003      	add	sp, #12
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	001a      	movs	r2, r3
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	18d2      	adds	r2, r2, r3
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_IncTick+0x20>)
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000248 	.word	0x20000248

080013b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_GetTick+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	20000248 	.word	0x20000248

080013c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0f0      	b.n	80015bc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2220      	movs	r2, #32
 80013de:	5c9b      	ldrb	r3, [r3, r2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fd71 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2102      	movs	r1, #2
 80013fa:	438a      	bics	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fe:	f7ff ffd9 	bl	80013b4 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001406:	e013      	b.n	8001430 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001408:	f7ff ffd4 	bl	80013b4 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d90c      	bls.n	8001430 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0292      	lsls	r2, r2, #10
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2220      	movs	r2, #32
 8001428:	2105      	movs	r1, #5
 800142a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0c5      	b.n	80015bc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	4013      	ands	r3, r2
 800143a:	d1e5      	bne.n	8001408 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144c:	f7ff ffb2 	bl	80013b4 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001454:	e013      	b.n	800147e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001456:	f7ff ffad 	bl	80013b4 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d90c      	bls.n	800147e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	0292      	lsls	r2, r2, #10
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	2105      	movs	r1, #5
 8001478:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e09e      	b.n	80015bc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	4013      	ands	r3, r2
 8001488:	d0e5      	beq.n	8001456 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e1b      	ldrb	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e007      	b.n	80014b4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	438a      	bics	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e5b      	ldrb	r3, [r3, #25]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e007      	b.n	80014de <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	438a      	bics	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7e9b      	ldrb	r3, [r3, #26]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2120      	movs	r1, #32
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e007      	b.n	8001508 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2120      	movs	r1, #32
 8001504:	438a      	bics	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7edb      	ldrb	r3, [r3, #27]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2110      	movs	r1, #16
 800151c:	438a      	bics	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2110      	movs	r1, #16
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7f1b      	ldrb	r3, [r3, #28]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2108      	movs	r1, #8
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e007      	b.n	800155c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2108      	movs	r1, #8
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f5b      	ldrb	r3, [r3, #29]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2104      	movs	r1, #4
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e007      	b.n	8001586 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2104      	movs	r1, #4
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	431a      	orrs	r2, r3
 800159c:	0011      	movs	r1, r2
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	2101      	movs	r1, #1
 80015b8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d4:	2013      	movs	r0, #19
 80015d6:	183b      	adds	r3, r7, r0
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	2120      	movs	r1, #32
 80015dc:	5c52      	ldrb	r2, [r2, r1]
 80015de:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e0:	183b      	adds	r3, r7, r0
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d005      	beq.n	80015f4 <HAL_CAN_ConfigFilter+0x30>
 80015e8:	2313      	movs	r3, #19
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d000      	beq.n	80015f4 <HAL_CAN_ConfigFilter+0x30>
 80015f2:	e0cd      	b.n	8001790 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	58d3      	ldr	r3, [r2, r3]
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0011      	movs	r1, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	221f      	movs	r2, #31
 8001610:	4013      	ands	r3, r2
 8001612:	2201      	movs	r2, #1
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	2387      	movs	r3, #135	; 0x87
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	58d3      	ldr	r3, [r2, r3]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	43d2      	mvns	r2, r2
 8001626:	401a      	ands	r2, r3
 8001628:	0011      	movs	r1, r2
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	2387      	movs	r3, #135	; 0x87
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d129      	bne.n	800168e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	2383      	movs	r3, #131	; 0x83
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	58d3      	ldr	r3, [r2, r3]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	43d2      	mvns	r2, r2
 8001646:	401a      	ands	r2, r3
 8001648:	0011      	movs	r1, r2
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	2383      	movs	r3, #131	; 0x83
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001664:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3248      	adds	r2, #72	; 0x48
 800166a:	00d2      	lsls	r2, r2, #3
 800166c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001680:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001682:	6979      	ldr	r1, [r7, #20]
 8001684:	3348      	adds	r3, #72	; 0x48
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	18cb      	adds	r3, r1, r3
 800168a:	3304      	adds	r3, #4
 800168c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d128      	bne.n	80016e8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	2383      	movs	r3, #131	; 0x83
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	58d2      	ldr	r2, [r2, r3]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	0011      	movs	r1, r2
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	2383      	movs	r3, #131	; 0x83
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016be:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3248      	adds	r2, #72	; 0x48
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016dc:	6979      	ldr	r1, [r7, #20]
 80016de:	3348      	adds	r3, #72	; 0x48
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	18cb      	adds	r3, r1, r3
 80016e4:	3304      	adds	r3, #4
 80016e6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	2381      	movs	r3, #129	; 0x81
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	58d3      	ldr	r3, [r2, r3]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	43d2      	mvns	r2, r2
 80016fc:	401a      	ands	r2, r3
 80016fe:	0011      	movs	r1, r2
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	2381      	movs	r3, #129	; 0x81
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	50d1      	str	r1, [r2, r3]
 8001708:	e00a      	b.n	8001720 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	2381      	movs	r3, #129	; 0x81
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	58d2      	ldr	r2, [r2, r3]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	431a      	orrs	r2, r3
 8001716:	0011      	movs	r1, r2
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	2381      	movs	r3, #129	; 0x81
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	2385      	movs	r3, #133	; 0x85
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	58d3      	ldr	r3, [r2, r3]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	43d2      	mvns	r2, r2
 8001734:	401a      	ands	r2, r3
 8001736:	0011      	movs	r1, r2
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	2385      	movs	r3, #133	; 0x85
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	50d1      	str	r1, [r2, r3]
 8001740:	e00a      	b.n	8001758 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	2385      	movs	r3, #133	; 0x85
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	58d2      	ldr	r2, [r2, r3]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	431a      	orrs	r2, r3
 800174e:	0011      	movs	r1, r2
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	2385      	movs	r3, #133	; 0x85
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10a      	bne.n	8001776 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	2387      	movs	r3, #135	; 0x87
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	58d2      	ldr	r2, [r2, r3]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	431a      	orrs	r2, r3
 800176c:	0011      	movs	r1, r2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	2387      	movs	r3, #135	; 0x87
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	58d3      	ldr	r3, [r2, r3]
 800177e:	2201      	movs	r2, #1
 8001780:	4393      	bics	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e007      	b.n	80017a0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	02d2      	lsls	r2, r2, #11
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
  }
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d12f      	bne.n	800181c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	2102      	movs	r1, #2
 80017c2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2101      	movs	r1, #1
 80017d0:	438a      	bics	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fdee 	bl	80013b4 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017dc:	e013      	b.n	8001806 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017de:	f7ff fde9 	bl	80013b4 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d90c      	bls.n	8001806 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	0292      	lsls	r2, r2, #10
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	2105      	movs	r1, #5
 8001800:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e012      	b.n	800182c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	d1e5      	bne.n	80017de <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e007      	b.n	800182c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0312      	lsls	r2, r2, #12
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
  }
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001842:	2017      	movs	r0, #23
 8001844:	183b      	adds	r3, r7, r0
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	2120      	movs	r1, #32
 800184a:	5c52      	ldrb	r2, [r2, r1]
 800184c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800184e:	183b      	adds	r3, r7, r0
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d005      	beq.n	8001862 <HAL_CAN_GetRxMessage+0x2e>
 8001856:	2317      	movs	r3, #23
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d000      	beq.n	8001862 <HAL_CAN_GetRxMessage+0x2e>
 8001860:	e0f8      	b.n	8001a54 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10e      	bne.n	8001886 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	d117      	bne.n	80018a4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	0392      	lsls	r2, r2, #14
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0ee      	b.n	8001a64 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	d108      	bne.n	80018a4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	0392      	lsls	r2, r2, #14
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0df      	b.n	8001a64 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	321b      	adds	r2, #27
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	58d3      	ldr	r3, [r2, r3]
 80018b0:	2204      	movs	r2, #4
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10b      	bne.n	80018d8 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	321b      	adds	r2, #27
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	58d3      	ldr	r3, [r2, r3]
 80018cc:	0d5b      	lsrs	r3, r3, #21
 80018ce:	055b      	lsls	r3, r3, #21
 80018d0:	0d5a      	lsrs	r2, r3, #21
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e00a      	b.n	80018ee <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	321b      	adds	r2, #27
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	321b      	adds	r2, #27
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	58d3      	ldr	r3, [r2, r3]
 80018fa:	2202      	movs	r2, #2
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	331b      	adds	r3, #27
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	3304      	adds	r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	220f      	movs	r2, #15
 8001914:	401a      	ands	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	331b      	adds	r3, #27
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	18d3      	adds	r3, r2, r3
 8001926:	3304      	adds	r3, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	22ff      	movs	r2, #255	; 0xff
 800192e:	401a      	ands	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	331b      	adds	r3, #27
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	3304      	adds	r3, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	041b      	lsls	r3, r3, #16
 8001948:	0c1a      	lsrs	r2, r3, #16
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	23dc      	movs	r3, #220	; 0xdc
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	188a      	adds	r2, r1, r2
 800195c:	18d3      	adds	r3, r2, r3
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	23dc      	movs	r3, #220	; 0xdc
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	188a      	adds	r2, r1, r2
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0a1a      	lsrs	r2, r3, #8
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	23dc      	movs	r3, #220	; 0xdc
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	188a      	adds	r2, r1, r2
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0c1a      	lsrs	r2, r3, #16
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	3302      	adds	r3, #2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	23dc      	movs	r3, #220	; 0xdc
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	188a      	adds	r2, r1, r2
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e1a      	lsrs	r2, r3, #24
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3303      	adds	r3, #3
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	23de      	movs	r3, #222	; 0xde
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	188a      	adds	r2, r1, r2
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3304      	adds	r3, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	23de      	movs	r3, #222	; 0xde
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	188a      	adds	r2, r1, r2
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0a1a      	lsrs	r2, r3, #8
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3305      	adds	r3, #5
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	23de      	movs	r3, #222	; 0xde
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	188a      	adds	r2, r1, r2
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0c1a      	lsrs	r2, r3, #16
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3306      	adds	r3, #6
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	23de      	movs	r3, #222	; 0xde
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	188a      	adds	r2, r1, r2
 8001a1a:	18d3      	adds	r3, r2, r3
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e1a      	lsrs	r2, r3, #24
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3307      	adds	r3, #7
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2120      	movs	r1, #32
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e007      	b.n	8001a64 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	02d2      	lsls	r2, r2, #11
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
  }
}
 8001a64:	0018      	movs	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b006      	add	sp, #24
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7a:	200b      	movs	r0, #11
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	2120      	movs	r1, #32
 8001a82:	5c52      	ldrb	r2, [r2, r1]
 8001a84:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d004      	beq.n	8001a98 <HAL_CAN_GetRxFifoFillLevel+0x2c>
 8001a8e:	230b      	movs	r3, #11
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d10f      	bne.n	8001ab8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_CAN_GetRxFifoFillLevel+0x40>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e005      	b.n	8001ab8 <HAL_CAN_GetRxFifoFillLevel+0x4c>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	0002      	movs	r2, r0
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad6:	d809      	bhi.n	8001aec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad8:	1dfb      	adds	r3, r7, #7
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	001a      	movs	r2, r3
 8001ade:	231f      	movs	r3, #31
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_EnableIRQ+0x30>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4091      	lsls	r1, r2
 8001ae8:	000a      	movs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
  }
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	0002      	movs	r2, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8001b0c:	d828      	bhi.n	8001b60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <__NVIC_SetPriority+0xd4>)
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b25b      	sxtb	r3, r3
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	33c0      	adds	r3, #192	; 0xc0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	589b      	ldr	r3, [r3, r2]
 8001b1e:	1dfa      	adds	r2, r7, #7
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	0011      	movs	r1, r2
 8001b24:	2203      	movs	r2, #3
 8001b26:	400a      	ands	r2, r1
 8001b28:	00d2      	lsls	r2, r2, #3
 8001b2a:	21ff      	movs	r1, #255	; 0xff
 8001b2c:	4091      	lsls	r1, r2
 8001b2e:	000a      	movs	r2, r1
 8001b30:	43d2      	mvns	r2, r2
 8001b32:	401a      	ands	r2, r3
 8001b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	22ff      	movs	r2, #255	; 0xff
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	0018      	movs	r0, r3
 8001b44:	2303      	movs	r3, #3
 8001b46:	4003      	ands	r3, r0
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <__NVIC_SetPriority+0xd4>)
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	430a      	orrs	r2, r1
 8001b58:	33c0      	adds	r3, #192	; 0xc0
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b5e:	e031      	b.n	8001bc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <__NVIC_SetPriority+0xd8>)
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	0019      	movs	r1, r3
 8001b68:	230f      	movs	r3, #15
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3306      	adds	r3, #6
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	18d3      	adds	r3, r2, r3
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1dfa      	adds	r2, r7, #7
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	0011      	movs	r1, r2
 8001b80:	2203      	movs	r2, #3
 8001b82:	400a      	ands	r2, r1
 8001b84:	00d2      	lsls	r2, r2, #3
 8001b86:	21ff      	movs	r1, #255	; 0xff
 8001b88:	4091      	lsls	r1, r2
 8001b8a:	000a      	movs	r2, r1
 8001b8c:	43d2      	mvns	r2, r2
 8001b8e:	401a      	ands	r2, r3
 8001b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	22ff      	movs	r2, #255	; 0xff
 8001b98:	401a      	ands	r2, r3
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	4003      	ands	r3, r0
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <__NVIC_SetPriority+0xd8>)
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	001c      	movs	r4, r3
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	4023      	ands	r3, r4
 8001bb4:	3b08      	subs	r3, #8
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	3306      	adds	r3, #6
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	18c3      	adds	r3, r0, r3
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b003      	add	sp, #12
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <SysTick_Config+0x40>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e010      	b.n	8001c0c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <SysTick_Config+0x44>)
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ff7d 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SysTick_Config+0x44>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x44>)
 8001c06:	2207      	movs	r2, #7
 8001c08:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	00ffffff 	.word	0x00ffffff
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	210f      	movs	r1, #15
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff33 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b002      	add	sp, #8
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ffaf 	bl	8001bd4 <SysTick_Config>
 8001c76:	0003      	movs	r3, r0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8e:	e149      	b.n	8001f24 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4091      	lsls	r1, r2
 8001c9a:	000a      	movs	r2, r1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d100      	bne.n	8001ca8 <HAL_GPIO_Init+0x28>
 8001ca6:	e13a      	b.n	8001f1e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d00b      	beq.n	8001cc8 <HAL_GPIO_Init+0x48>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbc:	2b11      	cmp	r3, #17
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b12      	cmp	r3, #18
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	2201      	movs	r2, #1
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0xea>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b12      	cmp	r3, #18
 8001d68:	d123      	bne.n	8001db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	58d3      	ldr	r3, [r2, r3]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2107      	movs	r1, #7
 8001d96:	400b      	ands	r3, r1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	6939      	ldr	r1, [r7, #16]
 8001db0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	055b      	lsls	r3, r3, #21
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_GPIO_Init+0x174>
 8001df2:	e094      	b.n	8001f1e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	619a      	str	r2, [r3, #24]
 8001e00:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <HAL_GPIO_Init+0x2bc>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x2c0>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	589b      	ldr	r3, [r3, r2]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4013      	ands	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	409a      	lsls	r2, r3
 8001e26:	0013      	movs	r3, r2
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	2390      	movs	r3, #144	; 0x90
 8001e34:	05db      	lsls	r3, r3, #23
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x1d6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a41      	ldr	r2, [pc, #260]	; (8001f44 <HAL_GPIO_Init+0x2c4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x1d2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HAL_GPIO_Init+0x2c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x1ce>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x1d8>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x1d8>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x1d8>
 8001e56:	2300      	movs	r3, #0
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	4093      	lsls	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e68:	4935      	ldr	r1, [pc, #212]	; (8001f40 <HAL_GPIO_Init+0x2c0>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e76:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	025b      	lsls	r3, r3, #9
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	035b      	lsls	r3, r3, #13
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43da      	mvns	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	039b      	lsls	r3, r3, #14
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	40da      	lsrs	r2, r3
 8001f2c:	1e13      	subs	r3, r2, #0
 8001f2e:	d000      	beq.n	8001f32 <HAL_GPIO_Init+0x2b2>
 8001f30:	e6ae      	b.n	8001c90 <HAL_GPIO_Init+0x10>
  } 
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b006      	add	sp, #24
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000
 8001f44:	48000400 	.word	0x48000400
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	0008      	movs	r0, r1
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	1cbb      	adds	r3, r7, #2
 8001f5e:	1c02      	adds	r2, r0, #0
 8001f60:	801a      	strh	r2, [r3, #0]
 8001f62:	1c7b      	adds	r3, r7, #1
 8001f64:	1c0a      	adds	r2, r1, #0
 8001f66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f68:	1c7b      	adds	r3, r7, #1
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f70:	1cbb      	adds	r3, r7, #2
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	1cbb      	adds	r3, r7, #2
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	000a      	movs	r2, r1
 8001f94:	1cbb      	adds	r3, r7, #2
 8001f96:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9e:	1cbb      	adds	r3, r7, #2
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	1cb9      	adds	r1, r7, #2
 8001fae:	8809      	ldrh	r1, [r1, #0]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b004      	add	sp, #16
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f000 fb76 	bl	80026c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d100      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x20>
 8001fde:	e08e      	b.n	80020fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fe0:	4bc5      	ldr	r3, [pc, #788]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00e      	beq.n	800200a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fec:	4bc2      	ldr	r3, [pc, #776]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d117      	bne.n	8002028 <HAL_RCC_OscConfig+0x68>
 8001ff8:	4bbf      	ldr	r3, [pc, #764]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	401a      	ands	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	429a      	cmp	r2, r3
 8002008:	d10e      	bne.n	8002028 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4bbb      	ldr	r3, [pc, #748]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	4013      	ands	r3, r2
 8002014:	d100      	bne.n	8002018 <HAL_RCC_OscConfig+0x58>
 8002016:	e071      	b.n	80020fc <HAL_RCC_OscConfig+0x13c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d000      	beq.n	8002022 <HAL_RCC_OscConfig+0x62>
 8002020:	e06c      	b.n	80020fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f000 fb4c 	bl	80026c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_RCC_OscConfig+0x80>
 8002030:	4bb1      	ldr	r3, [pc, #708]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4bb0      	ldr	r3, [pc, #704]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0249      	lsls	r1, r1, #9
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e02f      	b.n	80020a0 <HAL_RCC_OscConfig+0xe0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0xa2>
 8002048:	4bab      	ldr	r3, [pc, #684]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4baa      	ldr	r3, [pc, #680]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800204e:	49ab      	ldr	r1, [pc, #684]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4ba8      	ldr	r3, [pc, #672]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4ba7      	ldr	r3, [pc, #668]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800205a:	49a9      	ldr	r1, [pc, #676]	; (8002300 <HAL_RCC_OscConfig+0x340>)
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e01e      	b.n	80020a0 <HAL_RCC_OscConfig+0xe0>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d10e      	bne.n	8002088 <HAL_RCC_OscConfig+0xc8>
 800206a:	4ba3      	ldr	r3, [pc, #652]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4ba2      	ldr	r3, [pc, #648]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	02c9      	lsls	r1, r1, #11
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b9f      	ldr	r3, [pc, #636]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b9e      	ldr	r3, [pc, #632]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xe0>
 8002088:	4b9b      	ldr	r3, [pc, #620]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b9a      	ldr	r3, [pc, #616]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800208e:	499b      	ldr	r1, [pc, #620]	; (80022fc <HAL_RCC_OscConfig+0x33c>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	4b98      	ldr	r3, [pc, #608]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b97      	ldr	r3, [pc, #604]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800209a:	4999      	ldr	r1, [pc, #612]	; (8002300 <HAL_RCC_OscConfig+0x340>)
 800209c:	400a      	ands	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f984 	bl	80013b4 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b2:	f7ff f97f 	bl	80013b4 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2fd      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0xf2>
 80020d0:	e015      	b.n	80020fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff f96f 	bl	80013b4 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f96a 	bl	80013b4 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2e8      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x11c>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x14a>
 8002108:	e06c      	b.n	80021e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	220c      	movs	r2, #12
 8002110:	4013      	ands	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002114:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	220c      	movs	r2, #12
 800211a:	4013      	ands	r3, r2
 800211c:	2b08      	cmp	r3, #8
 800211e:	d11f      	bne.n	8002160 <HAL_RCC_OscConfig+0x1a0>
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	23c0      	movs	r3, #192	; 0xc0
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	401a      	ands	r2, r3
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	429a      	cmp	r2, r3
 8002130:	d116      	bne.n	8002160 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2202      	movs	r2, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x188>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e2bb      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	22f8      	movs	r2, #248	; 0xf8
 800214e:	4393      	bics	r3, r2
 8002150:	0019      	movs	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00da      	lsls	r2, r3, #3
 8002158:	4b67      	ldr	r3, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	e041      	b.n	80021e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d024      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800216e:	2101      	movs	r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff f91e 	bl	80013b4 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff f919 	bl	80013b4 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e297      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d0f1      	beq.n	800217e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	22f8      	movs	r2, #248	; 0xf8
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00da      	lsls	r2, r3, #3
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e018      	b.n	80021e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	438a      	bics	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7ff f8f9 	bl	80013b4 <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c8:	f7ff f8f4 	bl	80013b4 <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e272      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d1f1      	bne.n	80021c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	4013      	ands	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d019      	beq.n	800222a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002202:	f7ff f8d7 	bl	80013b4 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff f8d2 	bl	80013b4 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e250      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d0f1      	beq.n	800220c <HAL_RCC_OscConfig+0x24c>
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800222c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002230:	2101      	movs	r1, #1
 8002232:	438a      	bics	r2, r1
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff f8bd 	bl	80013b4 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff f8b8 	bl	80013b4 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e236      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d1f1      	bne.n	8002240 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2204      	movs	r2, #4
 8002262:	4013      	ands	r3, r2
 8002264:	d100      	bne.n	8002268 <HAL_RCC_OscConfig+0x2a8>
 8002266:	e0b5      	b.n	80023d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002268:	231f      	movs	r3, #31
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002270:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	055b      	lsls	r3, r3, #21
 8002278:	4013      	ands	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	0549      	lsls	r1, r1, #21
 8002286:	430a      	orrs	r2, r1
 8002288:	61da      	str	r2, [r3, #28]
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	055b      	lsls	r3, r3, #21
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002298:	231f      	movs	r3, #31
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d11a      	bne.n	80022e2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	0049      	lsls	r1, r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f87b 	bl	80013b4 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c4:	f7ff f876 	bl	80013b4 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1f4      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x344>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10e      	bne.n	8002308 <HAL_RCC_OscConfig+0x348>
 80022ea:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80022ec:	6a1a      	ldr	r2, [r3, #32]
 80022ee:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_RCC_OscConfig+0x338>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	621a      	str	r2, [r3, #32]
 80022f6:	e035      	b.n	8002364 <HAL_RCC_OscConfig+0x3a4>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	fffeffff 	.word	0xfffeffff
 8002300:	fffbffff 	.word	0xfffbffff
 8002304:	40007000 	.word	0x40007000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x36a>
 8002310:	4bca      	ldr	r3, [pc, #808]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	4bc9      	ldr	r3, [pc, #804]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002316:	2101      	movs	r1, #1
 8002318:	438a      	bics	r2, r1
 800231a:	621a      	str	r2, [r3, #32]
 800231c:	4bc7      	ldr	r3, [pc, #796]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	4bc6      	ldr	r3, [pc, #792]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002322:	2104      	movs	r1, #4
 8002324:	438a      	bics	r2, r1
 8002326:	621a      	str	r2, [r3, #32]
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x3a4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b05      	cmp	r3, #5
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x38c>
 8002332:	4bc2      	ldr	r3, [pc, #776]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	4bc1      	ldr	r3, [pc, #772]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002338:	2104      	movs	r1, #4
 800233a:	430a      	orrs	r2, r1
 800233c:	621a      	str	r2, [r3, #32]
 800233e:	4bbf      	ldr	r3, [pc, #764]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	4bbe      	ldr	r3, [pc, #760]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002344:	2101      	movs	r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	621a      	str	r2, [r3, #32]
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0x3a4>
 800234c:	4bbb      	ldr	r3, [pc, #748]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	4bba      	ldr	r3, [pc, #744]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	621a      	str	r2, [r3, #32]
 8002358:	4bb8      	ldr	r3, [pc, #736]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	4bb7      	ldr	r3, [pc, #732]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800235e:	2104      	movs	r1, #4
 8002360:	438a      	bics	r2, r1
 8002362:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d014      	beq.n	8002396 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff f822 	bl	80013b4 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e009      	b.n	800238a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff f81d 	bl	80013b4 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	4aaf      	ldr	r2, [pc, #700]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e19a      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238a:	4bac      	ldr	r3, [pc, #688]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	2202      	movs	r2, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x3b6>
 8002394:	e013      	b.n	80023be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7ff f80d 	bl	80013b4 <HAL_GetTick>
 800239a:	0003      	movs	r3, r0
 800239c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	e009      	b.n	80023b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff f808 	bl	80013b4 <HAL_GetTick>
 80023a4:	0002      	movs	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	4aa5      	ldr	r2, [pc, #660]	; (8002640 <HAL_RCC_OscConfig+0x680>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e185      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4ba1      	ldr	r3, [pc, #644]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023be:	231f      	movs	r3, #31
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c8:	4b9c      	ldr	r3, [pc, #624]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	4b9b      	ldr	r3, [pc, #620]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023ce:	499d      	ldr	r1, [pc, #628]	; (8002644 <HAL_RCC_OscConfig+0x684>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	4013      	ands	r3, r2
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d12a      	bne.n	800243c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023e6:	4b95      	ldr	r3, [pc, #596]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023ec:	2104      	movs	r1, #4
 80023ee:	430a      	orrs	r2, r1
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023f2:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f6:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe ffd9 	bl	80013b4 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002408:	f7fe ffd4 	bl	80013b4 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e152      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d0f1      	beq.n	8002408 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002424:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	22f8      	movs	r2, #248	; 0xf8
 800242a:	4393      	bics	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	00da      	lsls	r2, r3, #3
 8002434:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002436:	430a      	orrs	r2, r1
 8002438:	635a      	str	r2, [r3, #52]	; 0x34
 800243a:	e034      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	3305      	adds	r3, #5
 8002442:	d111      	bne.n	8002468 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002444:	4b7d      	ldr	r3, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002448:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800244a:	2104      	movs	r1, #4
 800244c:	438a      	bics	r2, r1
 800244e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002450:	4b7a      	ldr	r3, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	22f8      	movs	r2, #248	; 0xf8
 8002456:	4393      	bics	r3, r2
 8002458:	0019      	movs	r1, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	00da      	lsls	r2, r3, #3
 8002460:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002462:	430a      	orrs	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
 8002466:	e01e      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002468:	4b74      	ldr	r3, [pc, #464]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800246a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246c:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800246e:	2104      	movs	r1, #4
 8002470:	430a      	orrs	r2, r1
 8002472:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002474:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800247a:	2101      	movs	r1, #1
 800247c:	438a      	bics	r2, r1
 800247e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002480:	f7fe ff98 	bl	80013b4 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800248a:	f7fe ff93 	bl	80013b4 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e111      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800249c:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d1f1      	bne.n	800248a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2220      	movs	r2, #32
 80024ac:	4013      	ands	r3, r2
 80024ae:	d05c      	beq.n	800256a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024b0:	4b62      	ldr	r3, [pc, #392]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	220c      	movs	r2, #12
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	d00e      	beq.n	80024da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024bc:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	220c      	movs	r2, #12
 80024c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d114      	bne.n	80024f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80024c8:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	025b      	lsls	r3, r3, #9
 80024d0:	401a      	ands	r2, r3
 80024d2:	23c0      	movs	r3, #192	; 0xc0
 80024d4:	025b      	lsls	r3, r3, #9
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80024da:	4b58      	ldr	r3, [pc, #352]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80024dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	4013      	ands	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_RCC_OscConfig+0x5a8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d03c      	beq.n	8002568 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e6      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01b      	beq.n	8002532 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024fa:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80024fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0249      	lsls	r1, r1, #9
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe ff54 	bl	80013b4 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002512:	f7fe ff4f 	bl	80013b4 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0cd      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002524:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	4013      	ands	r3, r2
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x552>
 8002530:	e01b      	b.n	800256a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002538:	4943      	ldr	r1, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x688>)
 800253a:	400a      	ands	r2, r1
 800253c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe ff39 	bl	80013b4 <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002548:	f7fe ff34 	bl	80013b4 <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0b2      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	4013      	ands	r3, r2
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x588>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002568:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x5b4>
 8002572:	e0a4      	b.n	80026be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	220c      	movs	r2, #12
 800257a:	4013      	ands	r3, r2
 800257c:	2b08      	cmp	r3, #8
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x5c2>
 8002580:	e078      	b.n	8002674 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b02      	cmp	r3, #2
 8002588:	d14c      	bne.n	8002624 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b2c      	ldr	r3, [pc, #176]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002590:	492e      	ldr	r1, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 8002592:	400a      	ands	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe ff0d 	bl	80013b4 <HAL_GetTick>
 800259a:	0003      	movs	r3, r0
 800259c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe ff08 	bl	80013b4 <HAL_GetTick>
 80025a4:	0002      	movs	r2, r0
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e086      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	049b      	lsls	r3, r3, #18
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	220f      	movs	r2, #15
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_RCC_OscConfig+0x690>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	431a      	orrs	r2, r3
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0449      	lsls	r1, r1, #17
 80025f6:	430a      	orrs	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fedb 	bl	80013b4 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fed6 	bl	80013b4 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e054      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	049b      	lsls	r3, r3, #18
 800261e:	4013      	ands	r3, r2
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x644>
 8002622:	e04c      	b.n	80026be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <HAL_RCC_OscConfig+0x67c>)
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <HAL_RCC_OscConfig+0x68c>)
 800262c:	400a      	ands	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fec0 	bl	80013b4 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x6a6>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40021000 	.word	0x40021000
 8002640:	00001388 	.word	0x00001388
 8002644:	efffffff 	.word	0xefffffff
 8002648:	fffeffff 	.word	0xfffeffff
 800264c:	feffffff 	.word	0xfeffffff
 8002650:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe feae 	bl	80013b4 <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e02c      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_RCC_OscConfig+0x708>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	049b      	lsls	r3, r3, #18
 800266e:	4013      	ands	r3, r2
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x694>
 8002672:	e024      	b.n	80026be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e01f      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x708>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCC_OscConfig+0x708>)
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	025b      	lsls	r3, r3, #9
 8002692:	401a      	ands	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	429a      	cmp	r2, r3
 800269a:	d10e      	bne.n	80026ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	220f      	movs	r2, #15
 80026a0:	401a      	ands	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	23f0      	movs	r3, #240	; 0xf0
 80026ae:	039b      	lsls	r3, r3, #14
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b008      	add	sp, #32
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0bf      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d911      	bls.n	8002712 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b5e      	ldr	r3, [pc, #376]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	4b5b      	ldr	r3, [pc, #364]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	4013      	ands	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0a6      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	d015      	beq.n	8002748 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2204      	movs	r2, #4
 8002722:	4013      	ands	r3, r2
 8002724:	d006      	beq.n	8002734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 800272c:	21e0      	movs	r1, #224	; 0xe0
 800272e:	00c9      	lsls	r1, r1, #3
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	22f0      	movs	r2, #240	; 0xf0
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002744:	430a      	orrs	r2, r1
 8002746:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	d04c      	beq.n	80027ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	4013      	ands	r3, r2
 8002764:	d120      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07a      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b3e      	ldr	r3, [pc, #248]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	049b      	lsls	r3, r3, #18
 800277a:	4013      	ands	r3, r2
 800277c:	d114      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e06e      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	025b      	lsls	r3, r3, #9
 8002792:	4013      	ands	r3, r2
 8002794:	d108      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e062      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e05b      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	4393      	bics	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027bc:	f7fe fdfa 	bl	80013b4 <HAL_GetTick>
 80027c0:	0003      	movs	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c4:	e009      	b.n	80027da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f7fe fdf5 	bl	80013b4 <HAL_GetTick>
 80027ca:	0002      	movs	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_RCC_ClockConfig+0x1a4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e042      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	220c      	movs	r2, #12
 80027e0:	401a      	ands	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1ec      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d211      	bcs.n	800281e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	4393      	bics	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x19c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e020      	b.n	8002860 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2204      	movs	r2, #4
 8002824:	4013      	ands	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_RCC_ClockConfig+0x1a8>)
 800282e:	4013      	ands	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283c:	f000 f820 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8002840:	0001      	movs	r1, r0
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1a0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	220f      	movs	r2, #15
 800284a:	4013      	ands	r3, r2
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x1ac>)
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	000a      	movs	r2, r1
 8002852:	40da      	lsrs	r2, r3
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_ClockConfig+0x1b0>)
 8002856:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fd65 	bl	8001328 <HAL_InitTick>
  
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	00001388 	.word	0x00001388
 8002874:	fffff8ff 	.word	0xfffff8ff
 8002878:	0800486c 	.word	0x0800486c
 800287c:	20000000 	.word	0x20000000

08002880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08f      	sub	sp, #60	; 0x3c
 8002884:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002886:	2314      	movs	r3, #20
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	4a37      	ldr	r2, [pc, #220]	; (8002968 <HAL_RCC_GetSysClockFreq+0xe8>)
 800288c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800288e:	c313      	stmia	r3!, {r0, r1, r4}
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4a35      	ldr	r2, [pc, #212]	; (800296c <HAL_RCC_GetSysClockFreq+0xec>)
 8002898:	ca13      	ldmia	r2!, {r0, r1, r4}
 800289a:	c313      	stmia	r3!, {r0, r1, r4}
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	2300      	movs	r3, #0
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028b4:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	220c      	movs	r2, #12
 80028be:	4013      	ands	r3, r2
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d006      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x52>
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d043      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0xd0>
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d144      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_GetSysClockFreq+0xf4>)
 80028ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d0:	e044      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	220f      	movs	r2, #15
 80028d8:	4013      	ands	r3, r2
 80028da:	2214      	movs	r2, #20
 80028dc:	18ba      	adds	r2, r7, r2
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_GetSysClockFreq+0xf0>)
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	220f      	movs	r2, #15
 80028e8:	4013      	ands	r3, r2
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f2:	23c0      	movs	r3, #192	; 0xc0
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	401a      	ands	r2, r3
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d109      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002904:	f7fd fc00 	bl	8000108 <__udivsi3>
 8002908:	0003      	movs	r3, r0
 800290a:	001a      	movs	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	4353      	muls	r3, r2
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	e01a      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	025b      	lsls	r3, r3, #9
 800291a:	401a      	ands	r2, r3
 800291c:	23c0      	movs	r3, #192	; 0xc0
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	429a      	cmp	r2, r3
 8002922:	d109      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002926:	4814      	ldr	r0, [pc, #80]	; (8002978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002928:	f7fd fbee 	bl	8000108 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	001a      	movs	r2, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	4353      	muls	r3, r2
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
 8002936:	e008      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800293a:	480e      	ldr	r0, [pc, #56]	; (8002974 <HAL_RCC_GetSysClockFreq+0xf4>)
 800293c:	f7fd fbe4 	bl	8000108 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	001a      	movs	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	4353      	muls	r3, r2
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002954:	e002      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b00f      	add	sp, #60	; 0x3c
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	0800484c 	.word	0x0800484c
 800296c:	0800485c 	.word	0x0800485c
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200
 8002978:	02dc6c00 	.word	0x02dc6c00

0800297c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <HAL_RCC_GetHCLKFreq+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002994:	f7ff fff2 	bl	800297c <HAL_RCC_GetHCLKFreq>
 8002998:	0001      	movs	r1, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	2207      	movs	r2, #7
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	40d9      	lsrs	r1, r3
 80029aa:	000b      	movs	r3, r1
}    
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	40021000 	.word	0x40021000
 80029b8:	0800487c 	.word	0x0800487c

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01e      	b.n	8002a0c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	223d      	movs	r2, #61	; 0x3d
 80029d2:	5c9b      	ldrb	r3, [r3, r2]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	223c      	movs	r2, #60	; 0x3c
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7fe fac1 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223d      	movs	r2, #61	; 0x3d
 80029ee:	2102      	movs	r1, #2
 80029f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3304      	adds	r3, #4
 80029fa:	0019      	movs	r1, r3
 80029fc:	0010      	movs	r0, r2
 80029fe:	f000 fb51 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	223d      	movs	r2, #61	; 0x3d
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2101      	movs	r1, #1
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2207      	movs	r2, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d007      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e01e      	b.n	8002aa8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223d      	movs	r2, #61	; 0x3d
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223c      	movs	r2, #60	; 0x3c
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f815 	bl	8002ab0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223d      	movs	r2, #61	; 0x3d
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	0019      	movs	r1, r3
 8002a98:	0010      	movs	r0, r2
 8002a9a:	f000 fb03 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223d      	movs	r2, #61	; 0x3d
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 fdd6 	bl	8003684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_TIM_PWM_Start+0x80>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x36>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <HAL_TIM_PWM_Start+0x84>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_PWM_Start+0x36>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_TIM_PWM_Start+0x88>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_PWM_Start+0x3a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_TIM_PWM_Start+0x3c>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0209      	lsls	r1, r1, #8
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2207      	movs	r2, #7
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	d007      	beq.n	8002b34 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40014400 	.word	0x40014400
 8002b48:	40014800 	.word	0x40014800

08002b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d124      	bne.n	8002bac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d11d      	bne.n	8002bac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2203      	movs	r2, #3
 8002b76:	4252      	negs	r2, r2
 8002b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2203      	movs	r2, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 fa70 	bl	8003074 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e007      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fa63 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f000 fa6f 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d125      	bne.n	8002c06 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11e      	bne.n	8002c06 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2205      	movs	r2, #5
 8002bce:	4252      	negs	r2, r2
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	23c0      	movs	r3, #192	; 0xc0
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 fa43 	bl	8003074 <HAL_TIM_IC_CaptureCallback>
 8002bee:	e007      	b.n	8002c00 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 fa36 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 fa42 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d124      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11d      	bne.n	8002c5e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2209      	movs	r2, #9
 8002c28:	4252      	negs	r2, r2
 8002c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 fa17 	bl	8003074 <HAL_TIM_IC_CaptureCallback>
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 fa0a 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 fa16 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2210      	movs	r2, #16
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d125      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2210      	movs	r2, #16
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d11e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2211      	movs	r2, #17
 8002c80:	4252      	negs	r2, r2
 8002c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2208      	movs	r2, #8
 8002c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	23c0      	movs	r3, #192	; 0xc0
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4013      	ands	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f9ea 	bl	8003074 <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e007      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 f9dd 	bl	8003064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 f9e9 	bl	8003084 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4252      	negs	r2, r2
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe f89b 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d10f      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b80      	cmp	r3, #128	; 0x80
 8002d00:	d108      	bne.n	8002d14 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2281      	movs	r2, #129	; 0x81
 8002d08:	4252      	negs	r2, r2
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fd3c 	bl	800378c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d10f      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d108      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2241      	movs	r2, #65	; 0x41
 8002d36:	4252      	negs	r2, r2
 8002d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f9a9 	bl	8003094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d10f      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d108      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2221      	movs	r2, #33	; 0x21
 8002d64:	4252      	negs	r2, r2
 8002d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fd06 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b002      	add	sp, #8
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	223c      	movs	r2, #60	; 0x3c
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0a4      	b.n	8002edc <HAL_TIM_PWM_ConfigChannel+0x164>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	223c      	movs	r2, #60	; 0x3c
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	223d      	movs	r2, #61	; 0x3d
 8002d9e:	2102      	movs	r1, #2
 8002da0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d029      	beq.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x84>
 8002da8:	d802      	bhi.n	8002db0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8002dae:	e08c      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d046      	beq.n	8002e42 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d065      	beq.n	8002e84 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8002db8:	e087      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f9e4 	bl	8003190 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2104      	movs	r1, #4
 8002de4:	438a      	bics	r2, r1
 8002de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6999      	ldr	r1, [r3, #24]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	619a      	str	r2, [r3, #24]
      break;
 8002dfa:	e066      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fa41 	bl	800328c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0109      	lsls	r1, r1, #4
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	492f      	ldr	r1, [pc, #188]	; (8002ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	619a      	str	r2, [r3, #24]
      break;
 8002e40:	e043      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fa9c 	bl	8003388 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2108      	movs	r1, #8
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69d9      	ldr	r1, [r3, #28]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	61da      	str	r2, [r3, #28]
      break;
 8002e82:	e022      	b.n	8002eca <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 fafb 	bl	8003488 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0109      	lsls	r1, r1, #4
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	490d      	ldr	r1, [pc, #52]	; (8002ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69d9      	ldr	r1, [r3, #28]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
      break;
 8002ec8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	223d      	movs	r2, #61	; 0x3d
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	223c      	movs	r2, #60	; 0x3c
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	fffffbff 	.word	0xfffffbff

08002ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223c      	movs	r2, #60	; 0x3c
 8002ef6:	5c9b      	ldrb	r3, [r3, r2]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIM_ConfigClockSource+0x18>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0ab      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x170>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	223c      	movs	r2, #60	; 0x3c
 8002f04:	2101      	movs	r1, #1
 8002f06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223d      	movs	r2, #61	; 0x3d
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2277      	movs	r2, #119	; 0x77
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_TIM_ConfigClockSource+0x178>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d100      	bne.n	8002f3a <HAL_TIM_ConfigClockSource+0x52>
 8002f38:	e06b      	b.n	8003012 <HAL_TIM_ConfigClockSource+0x12a>
 8002f3a:	d80e      	bhi.n	8002f5a <HAL_TIM_ConfigClockSource+0x72>
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d100      	bne.n	8002f42 <HAL_TIM_ConfigClockSource+0x5a>
 8002f40:	e077      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x14a>
 8002f42:	d803      	bhi.n	8002f4c <HAL_TIM_ConfigClockSource+0x64>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d100      	bne.n	8002f4a <HAL_TIM_ConfigClockSource+0x62>
 8002f48:	e073      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f4a:	e07c      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d100      	bne.n	8002f52 <HAL_TIM_ConfigClockSource+0x6a>
 8002f50:	e06f      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x14a>
 8002f52:	2b30      	cmp	r3, #48	; 0x30
 8002f54:	d100      	bne.n	8002f58 <HAL_TIM_ConfigClockSource+0x70>
 8002f56:	e06c      	b.n	8003032 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002f58:	e075      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f5a:	2b70      	cmp	r3, #112	; 0x70
 8002f5c:	d00e      	beq.n	8002f7c <HAL_TIM_ConfigClockSource+0x94>
 8002f5e:	d804      	bhi.n	8002f6a <HAL_TIM_ConfigClockSource+0x82>
 8002f60:	2b50      	cmp	r3, #80	; 0x50
 8002f62:	d036      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0xea>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d044      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002f68:	e06d      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	0152      	lsls	r2, r2, #5
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d068      	beq.n	8003044 <HAL_TIM_ConfigClockSource+0x15c>
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	0192      	lsls	r2, r2, #6
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d017      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002f7a:	e064      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f000 fb5a 	bl	8003644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2277      	movs	r2, #119	; 0x77
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	609a      	str	r2, [r3, #8]
      break;
 8002fa8:	e04d      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f000 fb43 	bl	8003644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	01c9      	lsls	r1, r1, #7
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
      break;
 8002fd0:	e039      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	001a      	movs	r2, r3
 8002fe0:	f000 fab6 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2150      	movs	r1, #80	; 0x50
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 fb10 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e029      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	001a      	movs	r2, r3
 8003000:	f000 fad4 	bl	80035ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2160      	movs	r1, #96	; 0x60
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fb00 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8003010:	e019      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	001a      	movs	r2, r3
 8003020:	f000 fa96 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2140      	movs	r1, #64	; 0x40
 800302a:	0018      	movs	r0, r3
 800302c:	f000 faf0 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8003030:	e009      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f000 fae7 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8003042:	e000      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003044:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223d      	movs	r2, #61	; 0x3d
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	223c      	movs	r2, #60	; 0x3c
 8003052:	2100      	movs	r1, #0
 8003054:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}
 8003060:	ffff00ff 	.word	0xffff00ff

08003064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a30      	ldr	r2, [pc, #192]	; (8003178 <TIM_Base_SetConfig+0xd4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d008      	beq.n	80030ce <TIM_Base_SetConfig+0x2a>
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	05db      	lsls	r3, r3, #23
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x2a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2c      	ldr	r2, [pc, #176]	; (800317c <TIM_Base_SetConfig+0xd8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2270      	movs	r2, #112	; 0x70
 80030d2:	4393      	bics	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a25      	ldr	r2, [pc, #148]	; (8003178 <TIM_Base_SetConfig+0xd4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d014      	beq.n	8003112 <TIM_Base_SetConfig+0x6e>
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0x6e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <TIM_Base_SetConfig+0xd8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0x6e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a20      	ldr	r2, [pc, #128]	; (8003180 <TIM_Base_SetConfig+0xdc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0x6e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <TIM_Base_SetConfig+0xe0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0x6e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <TIM_Base_SetConfig+0xe4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <TIM_Base_SetConfig+0xe8>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	4393      	bics	r3, r2
 800312a:	001a      	movs	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <TIM_Base_SetConfig+0xd4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0xbe>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <TIM_Base_SetConfig+0xe0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0xbe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <TIM_Base_SetConfig+0xe4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d103      	bne.n	800316a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	615a      	str	r2, [r3, #20]
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40000400 	.word	0x40000400
 8003180:	40002000 	.word	0x40002000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800
 800318c:	fffffcff 	.word	0xfffffcff

08003190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2201      	movs	r2, #1
 80031a0:	4393      	bics	r3, r2
 80031a2:	001a      	movs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2270      	movs	r2, #112	; 0x70
 80031be:	4393      	bics	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2203      	movs	r2, #3
 80031c6:	4393      	bics	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2202      	movs	r2, #2
 80031d8:	4393      	bics	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	; (8003278 <TIM_OC1_SetConfig+0xe8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_OC1_SetConfig+0x6e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <TIM_OC1_SetConfig+0xec>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_OC1_SetConfig+0x6e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a21      	ldr	r2, [pc, #132]	; (8003280 <TIM_OC1_SetConfig+0xf0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10c      	bne.n	8003218 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2208      	movs	r2, #8
 8003202:	4393      	bics	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2204      	movs	r2, #4
 8003214:	4393      	bics	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <TIM_OC1_SetConfig+0xe8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_OC1_SetConfig+0xa0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a16      	ldr	r2, [pc, #88]	; (800327c <TIM_OC1_SetConfig+0xec>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_OC1_SetConfig+0xa0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <TIM_OC1_SetConfig+0xf0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <TIM_OC1_SetConfig+0xf4>)
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <TIM_OC1_SetConfig+0xf8>)
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b006      	add	sp, #24
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800
 8003284:	fffffeff 	.word	0xfffffeff
 8003288:	fffffdff 	.word	0xfffffdff

0800328c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2210      	movs	r2, #16
 800329c:	4393      	bics	r3, r2
 800329e:	001a      	movs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a2c      	ldr	r2, [pc, #176]	; (800336c <TIM_OC2_SetConfig+0xe0>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <TIM_OC2_SetConfig+0xe4>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2220      	movs	r2, #32
 80032d6:	4393      	bics	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d10d      	bne.n	800330a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	4393      	bics	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4393      	bics	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <TIM_OC2_SetConfig+0xe8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_OC2_SetConfig+0x96>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a18      	ldr	r2, [pc, #96]	; (8003378 <TIM_OC2_SetConfig+0xec>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_OC2_SetConfig+0x96>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <TIM_OC2_SetConfig+0xf0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d113      	bne.n	800334a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <TIM_OC2_SetConfig+0xf4>)
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4a15      	ldr	r2, [pc, #84]	; (8003384 <TIM_OC2_SetConfig+0xf8>)
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b006      	add	sp, #24
 800336a:	bd80      	pop	{r7, pc}
 800336c:	ffff8fff 	.word	0xffff8fff
 8003370:	fffffcff 	.word	0xfffffcff
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40014400 	.word	0x40014400
 800337c:	40014800 	.word	0x40014800
 8003380:	fffffbff 	.word	0xfffffbff
 8003384:	fffff7ff 	.word	0xfffff7ff

08003388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a33      	ldr	r2, [pc, #204]	; (8003464 <TIM_OC3_SetConfig+0xdc>)
 8003398:	401a      	ands	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2270      	movs	r2, #112	; 0x70
 80033b4:	4393      	bics	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2203      	movs	r2, #3
 80033bc:	4393      	bics	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <TIM_OC3_SetConfig+0xe0>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <TIM_OC3_SetConfig+0xe4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10d      	bne.n	8003402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <TIM_OC3_SetConfig+0xe8>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <TIM_OC3_SetConfig+0xec>)
 80033fe:	4013      	ands	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	; (800346c <TIM_OC3_SetConfig+0xe4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <TIM_OC3_SetConfig+0x92>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <TIM_OC3_SetConfig+0xf0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_OC3_SetConfig+0x92>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <TIM_OC3_SetConfig+0xf4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d113      	bne.n	8003442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <TIM_OC3_SetConfig+0xf8>)
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <TIM_OC3_SetConfig+0xfc>)
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b006      	add	sp, #24
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fffffeff 	.word	0xfffffeff
 8003468:	fffffdff 	.word	0xfffffdff
 800346c:	40012c00 	.word	0x40012c00
 8003470:	fffff7ff 	.word	0xfffff7ff
 8003474:	fffffbff 	.word	0xfffffbff
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800
 8003480:	ffffefff 	.word	0xffffefff
 8003484:	ffffdfff 	.word	0xffffdfff

08003488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <TIM_OC4_SetConfig+0xa8>)
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_OC4_SetConfig+0xac>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <TIM_OC4_SetConfig+0xb0>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <TIM_OC4_SetConfig+0xb4>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	031b      	lsls	r3, r3, #12
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <TIM_OC4_SetConfig+0xb8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_OC4_SetConfig+0x70>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <TIM_OC4_SetConfig+0xbc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_OC4_SetConfig+0x70>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <TIM_OC4_SetConfig+0xc0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d109      	bne.n	800350c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC4_SetConfig+0xc4>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	019b      	lsls	r3, r3, #6
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	ffffefff 	.word	0xffffefff
 8003534:	ffff8fff 	.word	0xffff8fff
 8003538:	fffffcff 	.word	0xfffffcff
 800353c:	ffffdfff 	.word	0xffffdfff
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800
 800354c:	ffffbfff 	.word	0xffffbfff

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	2201      	movs	r2, #1
 8003568:	4393      	bics	r3, r2
 800356a:	001a      	movs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	22f0      	movs	r2, #240	; 0xf0
 800357a:	4393      	bics	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	220a      	movs	r2, #10
 800358c:	4393      	bics	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}

080035ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	2210      	movs	r2, #16
 80035be:	4393      	bics	r3, r2
 80035c0:	001a      	movs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <TIM_TI2_ConfigInputStage+0x60>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	22a0      	movs	r2, #160	; 0xa0
 80035e8:	4393      	bics	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b006      	add	sp, #24
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	ffff0fff 	.word	0xffff0fff

08003610 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2270      	movs	r2, #112	; 0x70
 8003624:	4393      	bics	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	2207      	movs	r2, #7
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <TIM_ETR_SetConfig+0x3c>)
 800365c:	4013      	ands	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b006      	add	sp, #24
 800367e:	bd80      	pop	{r7, pc}
 8003680:	ffff00ff 	.word	0xffff00ff

08003684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	221f      	movs	r2, #31
 8003694:	4013      	ands	r3, r2
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	401a      	ands	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	211f      	movs	r1, #31
 80036b4:	400b      	ands	r3, r1
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4099      	lsls	r1, r3
 80036ba:	000b      	movs	r3, r1
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b006      	add	sp, #24
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	223c      	movs	r2, #60	; 0x3c
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e042      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	223c      	movs	r2, #60	; 0x3c
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	223d      	movs	r2, #61	; 0x3d
 80036f0:	2102      	movs	r1, #2
 80036f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2270      	movs	r2, #112	; 0x70
 8003708:	4393      	bics	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00a      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	05db      	lsls	r3, r3, #23
 8003730:	429a      	cmp	r2, r3
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	4393      	bics	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223d      	movs	r2, #61	; 0x3d
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	223c      	movs	r2, #60	; 0x3c
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e044      	b.n	8003838 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d107      	bne.n	80037c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2270      	movs	r2, #112	; 0x70
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7fd fca9 	bl	8001118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	; 0x24
 80037ca:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	438a      	bics	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 f8d8 	bl	8003994 <UART_SetConfig>
 80037e4:	0003      	movs	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e024      	b.n	8003838 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fa51 	bl	8003ca0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	490d      	ldr	r1, [pc, #52]	; (8003840 <HAL_UART_Init+0xa4>)
 800380a:	400a      	ands	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	212a      	movs	r1, #42	; 0x2a
 800381a:	438a      	bics	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 fae9 	bl	8003e08 <UART_CheckIdleState>
 8003836:	0003      	movs	r3, r0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	ffffb7ff 	.word	0xffffb7ff

08003844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	1dbb      	adds	r3, r7, #6
 8003852:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	2b20      	cmp	r3, #32
 800385a:	d000      	beq.n	800385e <HAL_UART_Transmit+0x1a>
 800385c:	e095      	b.n	800398a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_UART_Transmit+0x28>
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e08d      	b.n	800398c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	015b      	lsls	r3, r3, #5
 8003878:	429a      	cmp	r2, r3
 800387a:	d109      	bne.n	8003890 <HAL_UART_Transmit+0x4c>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2201      	movs	r2, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d001      	beq.n	8003890 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e07d      	b.n	800398c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2270      	movs	r2, #112	; 0x70
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UART_Transmit+0x5a>
 800389a:	2302      	movs	r3, #2
 800389c:	e076      	b.n	800398c <HAL_UART_Transmit+0x148>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2270      	movs	r2, #112	; 0x70
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038b2:	f7fd fd7f 	bl	80013b4 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1dba      	adds	r2, r7, #6
 80038be:	2150      	movs	r1, #80	; 0x50
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1dba      	adds	r2, r7, #6
 80038c8:	2152      	movs	r1, #82	; 0x52
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d108      	bne.n	80038ec <HAL_UART_Transmit+0xa8>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e003      	b.n	80038f4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038f4:	e02d      	b.n	8003952 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	0013      	movs	r3, r2
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	f000 fac6 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e03d      	b.n	800398c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	881a      	ldrh	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	05d2      	lsls	r2, r2, #23
 8003920:	0dd2      	lsrs	r2, r2, #23
 8003922:	b292      	uxth	r2, r2
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3302      	adds	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	e008      	b.n	8003940 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	781a      	ldrb	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b292      	uxth	r2, r2
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2252      	movs	r2, #82	; 0x52
 8003944:	5a9b      	ldrh	r3, [r3, r2]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b299      	uxth	r1, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2252      	movs	r2, #82	; 0x52
 8003950:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2252      	movs	r2, #82	; 0x52
 8003956:	5a9b      	ldrh	r3, [r3, r2]
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1cb      	bne.n	80038f6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	0013      	movs	r3, r2
 8003968:	2200      	movs	r2, #0
 800396a:	2140      	movs	r1, #64	; 0x40
 800396c:	f000 fa92 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e009      	b.n	800398c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2270      	movs	r2, #112	; 0x70
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b008      	add	sp, #32
 8003992:	bd80      	pop	{r7, pc}

08003994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80039a0:	2317      	movs	r3, #23
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4aad      	ldr	r2, [pc, #692]	; (8003c7c <UART_SetConfig+0x2e8>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4aa8      	ldr	r2, [pc, #672]	; (8003c80 <UART_SetConfig+0x2ec>)
 80039de:	4013      	ands	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a9f      	ldr	r2, [pc, #636]	; (8003c84 <UART_SetConfig+0x2f0>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a9b      	ldr	r2, [pc, #620]	; (8003c88 <UART_SetConfig+0x2f4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d125      	bne.n	8003a6a <UART_SetConfig+0xd6>
 8003a1e:	4b9b      	ldr	r3, [pc, #620]	; (8003c8c <UART_SetConfig+0x2f8>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2203      	movs	r2, #3
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d00f      	beq.n	8003a4a <UART_SetConfig+0xb6>
 8003a2a:	d304      	bcc.n	8003a36 <UART_SetConfig+0xa2>
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d011      	beq.n	8003a54 <UART_SetConfig+0xc0>
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d005      	beq.n	8003a40 <UART_SetConfig+0xac>
 8003a34:	e013      	b.n	8003a5e <UART_SetConfig+0xca>
 8003a36:	231f      	movs	r3, #31
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e022      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a40:	231f      	movs	r3, #31
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2202      	movs	r2, #2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e01d      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a4a:	231f      	movs	r3, #31
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2204      	movs	r2, #4
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e018      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a54:	231f      	movs	r3, #31
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2208      	movs	r2, #8
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e013      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a5e:	231f      	movs	r3, #31
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	2210      	movs	r2, #16
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	e00d      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a88      	ldr	r2, [pc, #544]	; (8003c90 <UART_SetConfig+0x2fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d104      	bne.n	8003a7e <UART_SetConfig+0xea>
 8003a74:	231f      	movs	r3, #31
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e003      	b.n	8003a86 <UART_SetConfig+0xf2>
 8003a7e:	231f      	movs	r3, #31
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2210      	movs	r2, #16
 8003a84:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d000      	beq.n	8003a94 <UART_SetConfig+0x100>
 8003a92:	e07d      	b.n	8003b90 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8003a94:	231f      	movs	r3, #31
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d01c      	beq.n	8003ad8 <UART_SetConfig+0x144>
 8003a9e:	dc02      	bgt.n	8003aa6 <UART_SetConfig+0x112>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <UART_SetConfig+0x11c>
 8003aa4:	e04b      	b.n	8003b3e <UART_SetConfig+0x1aa>
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d025      	beq.n	8003af6 <UART_SetConfig+0x162>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d037      	beq.n	8003b1e <UART_SetConfig+0x18a>
 8003aae:	e046      	b.n	8003b3e <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe ff6e 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	005a      	lsls	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	18d2      	adds	r2, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0019      	movs	r1, r3
 8003aca:	0010      	movs	r0, r2
 8003acc:	f7fc fb1c 	bl	8000108 <__udivsi3>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	61bb      	str	r3, [r7, #24]
        break;
 8003ad6:	e037      	b.n	8003b48 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	4a6d      	ldr	r2, [pc, #436]	; (8003c94 <UART_SetConfig+0x300>)
 8003ae0:	189a      	adds	r2, r3, r2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	0010      	movs	r0, r2
 8003aea:	f7fc fb0d 	bl	8000108 <__udivsi3>
 8003aee:	0003      	movs	r3, r0
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e028      	b.n	8003b48 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fec3 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	005a      	lsls	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	18d2      	adds	r2, r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f7fc faf9 	bl	8000108 <__udivsi3>
 8003b16:	0003      	movs	r3, r0
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e014      	b.n	8003b48 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	2280      	movs	r2, #128	; 0x80
 8003b26:	0252      	lsls	r2, r2, #9
 8003b28:	189a      	adds	r2, r3, r2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	0019      	movs	r1, r3
 8003b30:	0010      	movs	r0, r2
 8003b32:	f7fc fae9 	bl	8000108 <__udivsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	61bb      	str	r3, [r7, #24]
        break;
 8003b3c:	e004      	b.n	8003b48 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8003b3e:	2317      	movs	r3, #23
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
        break;
 8003b46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	d91b      	bls.n	8003b86 <UART_SetConfig+0x1f2>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4a51      	ldr	r2, [pc, #324]	; (8003c98 <UART_SetConfig+0x304>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d817      	bhi.n	8003b86 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	200a      	movs	r0, #10
 8003b5c:	183b      	adds	r3, r7, r0
 8003b5e:	210f      	movs	r1, #15
 8003b60:	438a      	bics	r2, r1
 8003b62:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b299      	uxth	r1, r3
 8003b70:	183b      	adds	r3, r7, r0
 8003b72:	183a      	adds	r2, r7, r0
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	183a      	adds	r2, r7, r0
 8003b80:	8812      	ldrh	r2, [r2, #0]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	e06c      	b.n	8003c60 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003b86:	2317      	movs	r3, #23
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e067      	b.n	8003c60 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003b90:	231f      	movs	r3, #31
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d01b      	beq.n	8003bd2 <UART_SetConfig+0x23e>
 8003b9a:	dc02      	bgt.n	8003ba2 <UART_SetConfig+0x20e>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <UART_SetConfig+0x218>
 8003ba0:	e049      	b.n	8003c36 <UART_SetConfig+0x2a2>
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d024      	beq.n	8003bf0 <UART_SetConfig+0x25c>
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d035      	beq.n	8003c16 <UART_SetConfig+0x282>
 8003baa:	e044      	b.n	8003c36 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe fef0 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085a      	lsrs	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	18d2      	adds	r2, r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	f7fc fa9f 	bl	8000108 <__udivsi3>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	61bb      	str	r3, [r7, #24]
        break;
 8003bd0:	e036      	b.n	8003c40 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <UART_SetConfig+0x308>)
 8003bda:	189a      	adds	r2, r3, r2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0019      	movs	r1, r3
 8003be2:	0010      	movs	r0, r2
 8003be4:	f7fc fa90 	bl	8000108 <__udivsi3>
 8003be8:	0003      	movs	r3, r0
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	61bb      	str	r3, [r7, #24]
        break;
 8003bee:	e027      	b.n	8003c40 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf0:	f7fe fe46 	bl	8002880 <HAL_RCC_GetSysClockFreq>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	085a      	lsrs	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	18d2      	adds	r2, r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	0019      	movs	r1, r3
 8003c08:	0010      	movs	r0, r2
 8003c0a:	f7fc fa7d 	bl	8000108 <__udivsi3>
 8003c0e:	0003      	movs	r3, r0
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	61bb      	str	r3, [r7, #24]
        break;
 8003c14:	e014      	b.n	8003c40 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0212      	lsls	r2, r2, #8
 8003c20:	189a      	adds	r2, r3, r2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	0019      	movs	r1, r3
 8003c28:	0010      	movs	r0, r2
 8003c2a:	f7fc fa6d 	bl	8000108 <__udivsi3>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e004      	b.n	8003c40 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8003c36:	2317      	movs	r3, #23
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
        break;
 8003c3e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d908      	bls.n	8003c58 <UART_SetConfig+0x2c4>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	4a13      	ldr	r2, [pc, #76]	; (8003c98 <UART_SetConfig+0x304>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d804      	bhi.n	8003c58 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e003      	b.n	8003c60 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003c58:	2317      	movs	r3, #23
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c6c:	2317      	movs	r3, #23
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b008      	add	sp, #32
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	efff69f3 	.word	0xefff69f3
 8003c80:	ffffcfff 	.word	0xffffcfff
 8003c84:	fffff4ff 	.word	0xfffff4ff
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40004400 	.word	0x40004400
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	0000ffff 	.word	0x0000ffff
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2201      	movs	r2, #1
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d00b      	beq.n	8003cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	; (8003de4 <UART_AdvFeatureConfig+0x144>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	2202      	movs	r2, #2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <UART_AdvFeatureConfig+0x148>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	0019      	movs	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d00b      	beq.n	8003d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	; (8003dec <UART_AdvFeatureConfig+0x14c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2208      	movs	r2, #8
 8003d14:	4013      	ands	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <UART_AdvFeatureConfig+0x150>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2210      	movs	r2, #16
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	; (8003df4 <UART_AdvFeatureConfig+0x154>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2220      	movs	r2, #32
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <UART_AdvFeatureConfig+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <UART_AdvFeatureConfig+0x15c>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	035b      	lsls	r3, r3, #13
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10b      	bne.n	8003dba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <UART_AdvFeatureConfig+0x160>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00b      	beq.n	8003ddc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <UART_AdvFeatureConfig+0x164>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	0019      	movs	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fffdffff 	.word	0xfffdffff
 8003de8:	fffeffff 	.word	0xfffeffff
 8003dec:	fffbffff 	.word	0xfffbffff
 8003df0:	ffff7fff 	.word	0xffff7fff
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffffdfff 	.word	0xffffdfff
 8003dfc:	ffefffff 	.word	0xffefffff
 8003e00:	ff9fffff 	.word	0xff9fffff
 8003e04:	fff7ffff 	.word	0xfff7ffff

08003e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e16:	f7fd facd 	bl	80013b4 <HAL_GetTick>
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2208      	movs	r2, #8
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d10d      	bne.n	8003e48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	0399      	lsls	r1, r3, #14
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <UART_CheckIdleState+0x88>)
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f000 f82a 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e01f      	b.n	8003e88 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d10d      	bne.n	8003e72 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	03d9      	lsls	r1, r3, #15
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <UART_CheckIdleState+0x88>)
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	0013      	movs	r3, r2
 8003e64:	2200      	movs	r2, #0
 8003e66:	f000 f815 	bl	8003e94 <UART_WaitOnFlagUntilTimeout>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d001      	beq.n	8003e72 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e00a      	b.n	8003e88 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2270      	movs	r2, #112	; 0x70
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b004      	add	sp, #16
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	01ffffff 	.word	0x01ffffff

08003e94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea4:	e05d      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	d05a      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eac:	f7fd fa82 	bl	80013b4 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11b      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	492f      	ldr	r1, [pc, #188]	; (8003f8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	438a      	bics	r2, r1
 8003ee0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2270      	movs	r2, #112	; 0x70
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e043      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2204      	movs	r2, #4
 8003f02:	4013      	ands	r3, r2
 8003f04:	d02d      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	401a      	ands	r2, r3
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d123      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4917      	ldr	r1, [pc, #92]	; (8003f8c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2270      	movs	r2, #112	; 0x70
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e00f      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	425a      	negs	r2, r3
 8003f72:	4153      	adcs	r3, r2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	001a      	movs	r2, r3
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d092      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	fffffe5f 	.word	0xfffffe5f

08003f90 <__errno>:
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <__errno+0x8>)
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	4770      	bx	lr
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	2000000c 	.word	0x2000000c

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	4d0c      	ldr	r5, [pc, #48]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa2:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	2600      	movs	r6, #0
 8003fae:	f000 fc29 	bl	8004804 <_init>
 8003fb2:	4d0a      	ldr	r5, [pc, #40]	; (8003fdc <__libc_init_array+0x40>)
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb6:	1b64      	subs	r4, r4, r5
 8003fb8:	10a4      	asrs	r4, r4, #2
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	00b3      	lsls	r3, r6, #2
 8003fc2:	58eb      	ldr	r3, [r5, r3]
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	00b3      	lsls	r3, r6, #2
 8003fcc:	58eb      	ldr	r3, [r5, r3]
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	080048b8 	.word	0x080048b8
 8003fd8:	080048b8 	.word	0x080048b8
 8003fdc:	080048b8 	.word	0x080048b8
 8003fe0:	080048bc 	.word	0x080048bc

08003fe4 <memset>:
 8003fe4:	0003      	movs	r3, r0
 8003fe6:	1812      	adds	r2, r2, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	7019      	strb	r1, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <siprintf>:
 8003ff4:	b40e      	push	{r1, r2, r3}
 8003ff6:	b500      	push	{lr}
 8003ff8:	490b      	ldr	r1, [pc, #44]	; (8004028 <siprintf+0x34>)
 8003ffa:	b09c      	sub	sp, #112	; 0x70
 8003ffc:	ab1d      	add	r3, sp, #116	; 0x74
 8003ffe:	9002      	str	r0, [sp, #8]
 8004000:	9006      	str	r0, [sp, #24]
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4809      	ldr	r0, [pc, #36]	; (800402c <siprintf+0x38>)
 8004008:	4909      	ldr	r1, [pc, #36]	; (8004030 <siprintf+0x3c>)
 800400a:	cb04      	ldmia	r3!, {r2}
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	a902      	add	r1, sp, #8
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	f000 f870 	bl	80040f8 <_svfiprintf_r>
 8004018:	2300      	movs	r3, #0
 800401a:	9a02      	ldr	r2, [sp, #8]
 800401c:	7013      	strb	r3, [r2, #0]
 800401e:	b01c      	add	sp, #112	; 0x70
 8004020:	bc08      	pop	{r3}
 8004022:	b003      	add	sp, #12
 8004024:	4718      	bx	r3
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	7fffffff 	.word	0x7fffffff
 800402c:	2000000c 	.word	0x2000000c
 8004030:	ffff0208 	.word	0xffff0208

08004034 <__ssputs_r>:
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	688e      	ldr	r6, [r1, #8]
 8004038:	b085      	sub	sp, #20
 800403a:	0007      	movs	r7, r0
 800403c:	000c      	movs	r4, r1
 800403e:	9203      	str	r2, [sp, #12]
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	429e      	cmp	r6, r3
 8004044:	d83c      	bhi.n	80040c0 <__ssputs_r+0x8c>
 8004046:	2390      	movs	r3, #144	; 0x90
 8004048:	898a      	ldrh	r2, [r1, #12]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	421a      	tst	r2, r3
 800404e:	d034      	beq.n	80040ba <__ssputs_r+0x86>
 8004050:	2503      	movs	r5, #3
 8004052:	6909      	ldr	r1, [r1, #16]
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	1a5b      	subs	r3, r3, r1
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	9802      	ldr	r0, [sp, #8]
 800405e:	435d      	muls	r5, r3
 8004060:	0feb      	lsrs	r3, r5, #31
 8004062:	195d      	adds	r5, r3, r5
 8004064:	9b01      	ldr	r3, [sp, #4]
 8004066:	106d      	asrs	r5, r5, #1
 8004068:	3301      	adds	r3, #1
 800406a:	181b      	adds	r3, r3, r0
 800406c:	42ab      	cmp	r3, r5
 800406e:	d900      	bls.n	8004072 <__ssputs_r+0x3e>
 8004070:	001d      	movs	r5, r3
 8004072:	0553      	lsls	r3, r2, #21
 8004074:	d532      	bpl.n	80040dc <__ssputs_r+0xa8>
 8004076:	0029      	movs	r1, r5
 8004078:	0038      	movs	r0, r7
 800407a:	f000 fb23 	bl	80046c4 <_malloc_r>
 800407e:	1e06      	subs	r6, r0, #0
 8004080:	d109      	bne.n	8004096 <__ssputs_r+0x62>
 8004082:	230c      	movs	r3, #12
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	2340      	movs	r3, #64	; 0x40
 8004088:	2001      	movs	r0, #1
 800408a:	89a2      	ldrh	r2, [r4, #12]
 800408c:	4240      	negs	r0, r0
 800408e:	4313      	orrs	r3, r2
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	b005      	add	sp, #20
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004096:	9a02      	ldr	r2, [sp, #8]
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	f000 faac 	bl	80045f6 <memcpy>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <__ssputs_r+0xc0>)
 80040a2:	401a      	ands	r2, r3
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	9b02      	ldr	r3, [sp, #8]
 80040ac:	6126      	str	r6, [r4, #16]
 80040ae:	18f6      	adds	r6, r6, r3
 80040b0:	6026      	str	r6, [r4, #0]
 80040b2:	6165      	str	r5, [r4, #20]
 80040b4:	9e01      	ldr	r6, [sp, #4]
 80040b6:	1aed      	subs	r5, r5, r3
 80040b8:	60a5      	str	r5, [r4, #8]
 80040ba:	9b01      	ldr	r3, [sp, #4]
 80040bc:	429e      	cmp	r6, r3
 80040be:	d900      	bls.n	80040c2 <__ssputs_r+0x8e>
 80040c0:	9e01      	ldr	r6, [sp, #4]
 80040c2:	0032      	movs	r2, r6
 80040c4:	9903      	ldr	r1, [sp, #12]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	f000 fa9e 	bl	8004608 <memmove>
 80040cc:	68a3      	ldr	r3, [r4, #8]
 80040ce:	2000      	movs	r0, #0
 80040d0:	1b9b      	subs	r3, r3, r6
 80040d2:	60a3      	str	r3, [r4, #8]
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	199e      	adds	r6, r3, r6
 80040d8:	6026      	str	r6, [r4, #0]
 80040da:	e7da      	b.n	8004092 <__ssputs_r+0x5e>
 80040dc:	002a      	movs	r2, r5
 80040de:	0038      	movs	r0, r7
 80040e0:	f000 fb4e 	bl	8004780 <_realloc_r>
 80040e4:	1e06      	subs	r6, r0, #0
 80040e6:	d1e0      	bne.n	80040aa <__ssputs_r+0x76>
 80040e8:	6921      	ldr	r1, [r4, #16]
 80040ea:	0038      	movs	r0, r7
 80040ec:	f000 faa0 	bl	8004630 <_free_r>
 80040f0:	e7c7      	b.n	8004082 <__ssputs_r+0x4e>
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	fffffb7f 	.word	0xfffffb7f

080040f8 <_svfiprintf_r>:
 80040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fa:	b0a1      	sub	sp, #132	; 0x84
 80040fc:	9003      	str	r0, [sp, #12]
 80040fe:	001d      	movs	r5, r3
 8004100:	898b      	ldrh	r3, [r1, #12]
 8004102:	000f      	movs	r7, r1
 8004104:	0016      	movs	r6, r2
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	d511      	bpl.n	800412e <_svfiprintf_r+0x36>
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10e      	bne.n	800412e <_svfiprintf_r+0x36>
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	f000 fad7 	bl	80046c4 <_malloc_r>
 8004116:	6038      	str	r0, [r7, #0]
 8004118:	6138      	str	r0, [r7, #16]
 800411a:	2800      	cmp	r0, #0
 800411c:	d105      	bne.n	800412a <_svfiprintf_r+0x32>
 800411e:	230c      	movs	r3, #12
 8004120:	9a03      	ldr	r2, [sp, #12]
 8004122:	3801      	subs	r0, #1
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	b021      	add	sp, #132	; 0x84
 8004128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	2300      	movs	r3, #0
 8004130:	ac08      	add	r4, sp, #32
 8004132:	6163      	str	r3, [r4, #20]
 8004134:	3320      	adds	r3, #32
 8004136:	7663      	strb	r3, [r4, #25]
 8004138:	3310      	adds	r3, #16
 800413a:	76a3      	strb	r3, [r4, #26]
 800413c:	9507      	str	r5, [sp, #28]
 800413e:	0035      	movs	r5, r6
 8004140:	782b      	ldrb	r3, [r5, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <_svfiprintf_r+0x52>
 8004146:	2b25      	cmp	r3, #37	; 0x25
 8004148:	d146      	bne.n	80041d8 <_svfiprintf_r+0xe0>
 800414a:	1bab      	subs	r3, r5, r6
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	d00c      	beq.n	800416a <_svfiprintf_r+0x72>
 8004150:	0032      	movs	r2, r6
 8004152:	0039      	movs	r1, r7
 8004154:	9803      	ldr	r0, [sp, #12]
 8004156:	f7ff ff6d 	bl	8004034 <__ssputs_r>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d100      	bne.n	8004160 <_svfiprintf_r+0x68>
 800415e:	e0ae      	b.n	80042be <_svfiprintf_r+0x1c6>
 8004160:	6962      	ldr	r2, [r4, #20]
 8004162:	9b05      	ldr	r3, [sp, #20]
 8004164:	4694      	mov	ip, r2
 8004166:	4463      	add	r3, ip
 8004168:	6163      	str	r3, [r4, #20]
 800416a:	782b      	ldrb	r3, [r5, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d100      	bne.n	8004172 <_svfiprintf_r+0x7a>
 8004170:	e0a5      	b.n	80042be <_svfiprintf_r+0x1c6>
 8004172:	2201      	movs	r2, #1
 8004174:	2300      	movs	r3, #0
 8004176:	4252      	negs	r2, r2
 8004178:	6062      	str	r2, [r4, #4]
 800417a:	a904      	add	r1, sp, #16
 800417c:	3254      	adds	r2, #84	; 0x54
 800417e:	1852      	adds	r2, r2, r1
 8004180:	1c6e      	adds	r6, r5, #1
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	60e3      	str	r3, [r4, #12]
 8004186:	60a3      	str	r3, [r4, #8]
 8004188:	7013      	strb	r3, [r2, #0]
 800418a:	65a3      	str	r3, [r4, #88]	; 0x58
 800418c:	7831      	ldrb	r1, [r6, #0]
 800418e:	2205      	movs	r2, #5
 8004190:	4853      	ldr	r0, [pc, #332]	; (80042e0 <_svfiprintf_r+0x1e8>)
 8004192:	f000 fa25 	bl	80045e0 <memchr>
 8004196:	1c75      	adds	r5, r6, #1
 8004198:	2800      	cmp	r0, #0
 800419a:	d11f      	bne.n	80041dc <_svfiprintf_r+0xe4>
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	06d3      	lsls	r3, r2, #27
 80041a0:	d504      	bpl.n	80041ac <_svfiprintf_r+0xb4>
 80041a2:	2353      	movs	r3, #83	; 0x53
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	185b      	adds	r3, r3, r1
 80041a8:	2120      	movs	r1, #32
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	0713      	lsls	r3, r2, #28
 80041ae:	d504      	bpl.n	80041ba <_svfiprintf_r+0xc2>
 80041b0:	2353      	movs	r3, #83	; 0x53
 80041b2:	a904      	add	r1, sp, #16
 80041b4:	185b      	adds	r3, r3, r1
 80041b6:	212b      	movs	r1, #43	; 0x2b
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	7833      	ldrb	r3, [r6, #0]
 80041bc:	2b2a      	cmp	r3, #42	; 0x2a
 80041be:	d016      	beq.n	80041ee <_svfiprintf_r+0xf6>
 80041c0:	0035      	movs	r5, r6
 80041c2:	2100      	movs	r1, #0
 80041c4:	200a      	movs	r0, #10
 80041c6:	68e3      	ldr	r3, [r4, #12]
 80041c8:	782a      	ldrb	r2, [r5, #0]
 80041ca:	1c6e      	adds	r6, r5, #1
 80041cc:	3a30      	subs	r2, #48	; 0x30
 80041ce:	2a09      	cmp	r2, #9
 80041d0:	d94e      	bls.n	8004270 <_svfiprintf_r+0x178>
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d018      	beq.n	8004208 <_svfiprintf_r+0x110>
 80041d6:	e010      	b.n	80041fa <_svfiprintf_r+0x102>
 80041d8:	3501      	adds	r5, #1
 80041da:	e7b1      	b.n	8004140 <_svfiprintf_r+0x48>
 80041dc:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <_svfiprintf_r+0x1e8>)
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	1ac0      	subs	r0, r0, r3
 80041e2:	2301      	movs	r3, #1
 80041e4:	4083      	lsls	r3, r0
 80041e6:	4313      	orrs	r3, r2
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	002e      	movs	r6, r5
 80041ec:	e7ce      	b.n	800418c <_svfiprintf_r+0x94>
 80041ee:	9b07      	ldr	r3, [sp, #28]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	9107      	str	r1, [sp, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db01      	blt.n	80041fe <_svfiprintf_r+0x106>
 80041fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80041fc:	e004      	b.n	8004208 <_svfiprintf_r+0x110>
 80041fe:	425b      	negs	r3, r3
 8004200:	60e3      	str	r3, [r4, #12]
 8004202:	2302      	movs	r3, #2
 8004204:	4313      	orrs	r3, r2
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	782b      	ldrb	r3, [r5, #0]
 800420a:	2b2e      	cmp	r3, #46	; 0x2e
 800420c:	d10a      	bne.n	8004224 <_svfiprintf_r+0x12c>
 800420e:	786b      	ldrb	r3, [r5, #1]
 8004210:	2b2a      	cmp	r3, #42	; 0x2a
 8004212:	d135      	bne.n	8004280 <_svfiprintf_r+0x188>
 8004214:	9b07      	ldr	r3, [sp, #28]
 8004216:	3502      	adds	r5, #2
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9207      	str	r2, [sp, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db2b      	blt.n	800427a <_svfiprintf_r+0x182>
 8004222:	9309      	str	r3, [sp, #36]	; 0x24
 8004224:	4e2f      	ldr	r6, [pc, #188]	; (80042e4 <_svfiprintf_r+0x1ec>)
 8004226:	7829      	ldrb	r1, [r5, #0]
 8004228:	2203      	movs	r2, #3
 800422a:	0030      	movs	r0, r6
 800422c:	f000 f9d8 	bl	80045e0 <memchr>
 8004230:	2800      	cmp	r0, #0
 8004232:	d006      	beq.n	8004242 <_svfiprintf_r+0x14a>
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	1b80      	subs	r0, r0, r6
 8004238:	4083      	lsls	r3, r0
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	3501      	adds	r5, #1
 800423e:	4313      	orrs	r3, r2
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	7829      	ldrb	r1, [r5, #0]
 8004244:	2206      	movs	r2, #6
 8004246:	4828      	ldr	r0, [pc, #160]	; (80042e8 <_svfiprintf_r+0x1f0>)
 8004248:	1c6e      	adds	r6, r5, #1
 800424a:	7621      	strb	r1, [r4, #24]
 800424c:	f000 f9c8 	bl	80045e0 <memchr>
 8004250:	2800      	cmp	r0, #0
 8004252:	d03c      	beq.n	80042ce <_svfiprintf_r+0x1d6>
 8004254:	4b25      	ldr	r3, [pc, #148]	; (80042ec <_svfiprintf_r+0x1f4>)
 8004256:	2b00      	cmp	r3, #0
 8004258:	d125      	bne.n	80042a6 <_svfiprintf_r+0x1ae>
 800425a:	2207      	movs	r2, #7
 800425c:	9b07      	ldr	r3, [sp, #28]
 800425e:	3307      	adds	r3, #7
 8004260:	4393      	bics	r3, r2
 8004262:	3308      	adds	r3, #8
 8004264:	9307      	str	r3, [sp, #28]
 8004266:	6963      	ldr	r3, [r4, #20]
 8004268:	9a04      	ldr	r2, [sp, #16]
 800426a:	189b      	adds	r3, r3, r2
 800426c:	6163      	str	r3, [r4, #20]
 800426e:	e766      	b.n	800413e <_svfiprintf_r+0x46>
 8004270:	4343      	muls	r3, r0
 8004272:	2101      	movs	r1, #1
 8004274:	189b      	adds	r3, r3, r2
 8004276:	0035      	movs	r5, r6
 8004278:	e7a6      	b.n	80041c8 <_svfiprintf_r+0xd0>
 800427a:	2301      	movs	r3, #1
 800427c:	425b      	negs	r3, r3
 800427e:	e7d0      	b.n	8004222 <_svfiprintf_r+0x12a>
 8004280:	2300      	movs	r3, #0
 8004282:	200a      	movs	r0, #10
 8004284:	001a      	movs	r2, r3
 8004286:	3501      	adds	r5, #1
 8004288:	6063      	str	r3, [r4, #4]
 800428a:	7829      	ldrb	r1, [r5, #0]
 800428c:	1c6e      	adds	r6, r5, #1
 800428e:	3930      	subs	r1, #48	; 0x30
 8004290:	2909      	cmp	r1, #9
 8004292:	d903      	bls.n	800429c <_svfiprintf_r+0x1a4>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0c5      	beq.n	8004224 <_svfiprintf_r+0x12c>
 8004298:	9209      	str	r2, [sp, #36]	; 0x24
 800429a:	e7c3      	b.n	8004224 <_svfiprintf_r+0x12c>
 800429c:	4342      	muls	r2, r0
 800429e:	2301      	movs	r3, #1
 80042a0:	1852      	adds	r2, r2, r1
 80042a2:	0035      	movs	r5, r6
 80042a4:	e7f1      	b.n	800428a <_svfiprintf_r+0x192>
 80042a6:	ab07      	add	r3, sp, #28
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	003a      	movs	r2, r7
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <_svfiprintf_r+0x1f8>)
 80042ae:	0021      	movs	r1, r4
 80042b0:	9803      	ldr	r0, [sp, #12]
 80042b2:	e000      	b.n	80042b6 <_svfiprintf_r+0x1be>
 80042b4:	bf00      	nop
 80042b6:	9004      	str	r0, [sp, #16]
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	3301      	adds	r3, #1
 80042bc:	d1d3      	bne.n	8004266 <_svfiprintf_r+0x16e>
 80042be:	89bb      	ldrh	r3, [r7, #12]
 80042c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042c2:	065b      	lsls	r3, r3, #25
 80042c4:	d400      	bmi.n	80042c8 <_svfiprintf_r+0x1d0>
 80042c6:	e72e      	b.n	8004126 <_svfiprintf_r+0x2e>
 80042c8:	2001      	movs	r0, #1
 80042ca:	4240      	negs	r0, r0
 80042cc:	e72b      	b.n	8004126 <_svfiprintf_r+0x2e>
 80042ce:	ab07      	add	r3, sp, #28
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	003a      	movs	r2, r7
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <_svfiprintf_r+0x1f8>)
 80042d6:	0021      	movs	r1, r4
 80042d8:	9803      	ldr	r0, [sp, #12]
 80042da:	f000 f879 	bl	80043d0 <_printf_i>
 80042de:	e7ea      	b.n	80042b6 <_svfiprintf_r+0x1be>
 80042e0:	08004884 	.word	0x08004884
 80042e4:	0800488a 	.word	0x0800488a
 80042e8:	0800488e 	.word	0x0800488e
 80042ec:	00000000 	.word	0x00000000
 80042f0:	08004035 	.word	0x08004035

080042f4 <_printf_common>:
 80042f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f6:	0015      	movs	r5, r2
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	688a      	ldr	r2, [r1, #8]
 80042fc:	690b      	ldr	r3, [r1, #16]
 80042fe:	9000      	str	r0, [sp, #0]
 8004300:	000c      	movs	r4, r1
 8004302:	4293      	cmp	r3, r2
 8004304:	da00      	bge.n	8004308 <_printf_common+0x14>
 8004306:	0013      	movs	r3, r2
 8004308:	0022      	movs	r2, r4
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	3243      	adds	r2, #67	; 0x43
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	2a00      	cmp	r2, #0
 8004312:	d001      	beq.n	8004318 <_printf_common+0x24>
 8004314:	3301      	adds	r3, #1
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	d502      	bpl.n	8004324 <_printf_common+0x30>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	3302      	adds	r3, #2
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	2706      	movs	r7, #6
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	401f      	ands	r7, r3
 800432a:	d027      	beq.n	800437c <_printf_common+0x88>
 800432c:	0023      	movs	r3, r4
 800432e:	3343      	adds	r3, #67	; 0x43
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	4193      	sbcs	r3, r2
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	0692      	lsls	r2, r2, #26
 800433a:	d430      	bmi.n	800439e <_printf_common+0xaa>
 800433c:	0022      	movs	r2, r4
 800433e:	9901      	ldr	r1, [sp, #4]
 8004340:	3243      	adds	r2, #67	; 0x43
 8004342:	9800      	ldr	r0, [sp, #0]
 8004344:	9e08      	ldr	r6, [sp, #32]
 8004346:	47b0      	blx	r6
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d025      	beq.n	8004398 <_printf_common+0xa4>
 800434c:	2306      	movs	r3, #6
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	682a      	ldr	r2, [r5, #0]
 8004352:	68e1      	ldr	r1, [r4, #12]
 8004354:	4003      	ands	r3, r0
 8004356:	2500      	movs	r5, #0
 8004358:	2b04      	cmp	r3, #4
 800435a:	d103      	bne.n	8004364 <_printf_common+0x70>
 800435c:	1a8d      	subs	r5, r1, r2
 800435e:	43eb      	mvns	r3, r5
 8004360:	17db      	asrs	r3, r3, #31
 8004362:	401d      	ands	r5, r3
 8004364:	68a3      	ldr	r3, [r4, #8]
 8004366:	6922      	ldr	r2, [r4, #16]
 8004368:	4293      	cmp	r3, r2
 800436a:	dd01      	ble.n	8004370 <_printf_common+0x7c>
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	18ed      	adds	r5, r5, r3
 8004370:	2700      	movs	r7, #0
 8004372:	42bd      	cmp	r5, r7
 8004374:	d120      	bne.n	80043b8 <_printf_common+0xc4>
 8004376:	2000      	movs	r0, #0
 8004378:	e010      	b.n	800439c <_printf_common+0xa8>
 800437a:	3701      	adds	r7, #1
 800437c:	68e3      	ldr	r3, [r4, #12]
 800437e:	682a      	ldr	r2, [r5, #0]
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	42bb      	cmp	r3, r7
 8004384:	ddd2      	ble.n	800432c <_printf_common+0x38>
 8004386:	0022      	movs	r2, r4
 8004388:	2301      	movs	r3, #1
 800438a:	3219      	adds	r2, #25
 800438c:	9901      	ldr	r1, [sp, #4]
 800438e:	9800      	ldr	r0, [sp, #0]
 8004390:	9e08      	ldr	r6, [sp, #32]
 8004392:	47b0      	blx	r6
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d1f0      	bne.n	800437a <_printf_common+0x86>
 8004398:	2001      	movs	r0, #1
 800439a:	4240      	negs	r0, r0
 800439c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800439e:	2030      	movs	r0, #48	; 0x30
 80043a0:	18e1      	adds	r1, r4, r3
 80043a2:	3143      	adds	r1, #67	; 0x43
 80043a4:	7008      	strb	r0, [r1, #0]
 80043a6:	0021      	movs	r1, r4
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	3145      	adds	r1, #69	; 0x45
 80043ac:	7809      	ldrb	r1, [r1, #0]
 80043ae:	18a2      	adds	r2, r4, r2
 80043b0:	3243      	adds	r2, #67	; 0x43
 80043b2:	3302      	adds	r3, #2
 80043b4:	7011      	strb	r1, [r2, #0]
 80043b6:	e7c1      	b.n	800433c <_printf_common+0x48>
 80043b8:	0022      	movs	r2, r4
 80043ba:	2301      	movs	r3, #1
 80043bc:	321a      	adds	r2, #26
 80043be:	9901      	ldr	r1, [sp, #4]
 80043c0:	9800      	ldr	r0, [sp, #0]
 80043c2:	9e08      	ldr	r6, [sp, #32]
 80043c4:	47b0      	blx	r6
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	d0e6      	beq.n	8004398 <_printf_common+0xa4>
 80043ca:	3701      	adds	r7, #1
 80043cc:	e7d1      	b.n	8004372 <_printf_common+0x7e>
	...

080043d0 <_printf_i>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	9204      	str	r2, [sp, #16]
 80043d6:	000a      	movs	r2, r1
 80043d8:	3243      	adds	r2, #67	; 0x43
 80043da:	9305      	str	r3, [sp, #20]
 80043dc:	9003      	str	r0, [sp, #12]
 80043de:	9202      	str	r2, [sp, #8]
 80043e0:	7e0a      	ldrb	r2, [r1, #24]
 80043e2:	000c      	movs	r4, r1
 80043e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043e6:	2a6e      	cmp	r2, #110	; 0x6e
 80043e8:	d100      	bne.n	80043ec <_printf_i+0x1c>
 80043ea:	e086      	b.n	80044fa <_printf_i+0x12a>
 80043ec:	d81f      	bhi.n	800442e <_printf_i+0x5e>
 80043ee:	2a63      	cmp	r2, #99	; 0x63
 80043f0:	d033      	beq.n	800445a <_printf_i+0x8a>
 80043f2:	d808      	bhi.n	8004406 <_printf_i+0x36>
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	d100      	bne.n	80043fa <_printf_i+0x2a>
 80043f8:	e08c      	b.n	8004514 <_printf_i+0x144>
 80043fa:	2a58      	cmp	r2, #88	; 0x58
 80043fc:	d04d      	beq.n	800449a <_printf_i+0xca>
 80043fe:	0025      	movs	r5, r4
 8004400:	3542      	adds	r5, #66	; 0x42
 8004402:	702a      	strb	r2, [r5, #0]
 8004404:	e030      	b.n	8004468 <_printf_i+0x98>
 8004406:	2a64      	cmp	r2, #100	; 0x64
 8004408:	d001      	beq.n	800440e <_printf_i+0x3e>
 800440a:	2a69      	cmp	r2, #105	; 0x69
 800440c:	d1f7      	bne.n	80043fe <_printf_i+0x2e>
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6825      	ldr	r5, [r4, #0]
 8004412:	1d0a      	adds	r2, r1, #4
 8004414:	0628      	lsls	r0, r5, #24
 8004416:	d529      	bpl.n	800446c <_printf_i+0x9c>
 8004418:	6808      	ldr	r0, [r1, #0]
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	2800      	cmp	r0, #0
 800441e:	da03      	bge.n	8004428 <_printf_i+0x58>
 8004420:	232d      	movs	r3, #45	; 0x2d
 8004422:	9a02      	ldr	r2, [sp, #8]
 8004424:	4240      	negs	r0, r0
 8004426:	7013      	strb	r3, [r2, #0]
 8004428:	4e6b      	ldr	r6, [pc, #428]	; (80045d8 <_printf_i+0x208>)
 800442a:	270a      	movs	r7, #10
 800442c:	e04f      	b.n	80044ce <_printf_i+0xfe>
 800442e:	2a73      	cmp	r2, #115	; 0x73
 8004430:	d074      	beq.n	800451c <_printf_i+0x14c>
 8004432:	d808      	bhi.n	8004446 <_printf_i+0x76>
 8004434:	2a6f      	cmp	r2, #111	; 0x6f
 8004436:	d01f      	beq.n	8004478 <_printf_i+0xa8>
 8004438:	2a70      	cmp	r2, #112	; 0x70
 800443a:	d1e0      	bne.n	80043fe <_printf_i+0x2e>
 800443c:	2220      	movs	r2, #32
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	6022      	str	r2, [r4, #0]
 8004444:	e003      	b.n	800444e <_printf_i+0x7e>
 8004446:	2a75      	cmp	r2, #117	; 0x75
 8004448:	d016      	beq.n	8004478 <_printf_i+0xa8>
 800444a:	2a78      	cmp	r2, #120	; 0x78
 800444c:	d1d7      	bne.n	80043fe <_printf_i+0x2e>
 800444e:	0022      	movs	r2, r4
 8004450:	2178      	movs	r1, #120	; 0x78
 8004452:	3245      	adds	r2, #69	; 0x45
 8004454:	7011      	strb	r1, [r2, #0]
 8004456:	4e61      	ldr	r6, [pc, #388]	; (80045dc <_printf_i+0x20c>)
 8004458:	e022      	b.n	80044a0 <_printf_i+0xd0>
 800445a:	0025      	movs	r5, r4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	3542      	adds	r5, #66	; 0x42
 8004460:	1d11      	adds	r1, r2, #4
 8004462:	6019      	str	r1, [r3, #0]
 8004464:	6813      	ldr	r3, [r2, #0]
 8004466:	702b      	strb	r3, [r5, #0]
 8004468:	2301      	movs	r3, #1
 800446a:	e065      	b.n	8004538 <_printf_i+0x168>
 800446c:	6808      	ldr	r0, [r1, #0]
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	0669      	lsls	r1, r5, #25
 8004472:	d5d3      	bpl.n	800441c <_printf_i+0x4c>
 8004474:	b200      	sxth	r0, r0
 8004476:	e7d1      	b.n	800441c <_printf_i+0x4c>
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	6825      	ldr	r5, [r4, #0]
 800447c:	1d08      	adds	r0, r1, #4
 800447e:	6018      	str	r0, [r3, #0]
 8004480:	6808      	ldr	r0, [r1, #0]
 8004482:	062e      	lsls	r6, r5, #24
 8004484:	d505      	bpl.n	8004492 <_printf_i+0xc2>
 8004486:	4e54      	ldr	r6, [pc, #336]	; (80045d8 <_printf_i+0x208>)
 8004488:	2708      	movs	r7, #8
 800448a:	2a6f      	cmp	r2, #111	; 0x6f
 800448c:	d01b      	beq.n	80044c6 <_printf_i+0xf6>
 800448e:	270a      	movs	r7, #10
 8004490:	e019      	b.n	80044c6 <_printf_i+0xf6>
 8004492:	066d      	lsls	r5, r5, #25
 8004494:	d5f7      	bpl.n	8004486 <_printf_i+0xb6>
 8004496:	b280      	uxth	r0, r0
 8004498:	e7f5      	b.n	8004486 <_printf_i+0xb6>
 800449a:	3145      	adds	r1, #69	; 0x45
 800449c:	4e4e      	ldr	r6, [pc, #312]	; (80045d8 <_printf_i+0x208>)
 800449e:	700a      	strb	r2, [r1, #0]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	1d01      	adds	r1, r0, #4
 80044a6:	6800      	ldr	r0, [r0, #0]
 80044a8:	6019      	str	r1, [r3, #0]
 80044aa:	0615      	lsls	r5, r2, #24
 80044ac:	d521      	bpl.n	80044f2 <_printf_i+0x122>
 80044ae:	07d3      	lsls	r3, r2, #31
 80044b0:	d502      	bpl.n	80044b8 <_printf_i+0xe8>
 80044b2:	2320      	movs	r3, #32
 80044b4:	431a      	orrs	r2, r3
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	2710      	movs	r7, #16
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d103      	bne.n	80044c6 <_printf_i+0xf6>
 80044be:	2320      	movs	r3, #32
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	439a      	bics	r2, r3
 80044c4:	6022      	str	r2, [r4, #0]
 80044c6:	0023      	movs	r3, r4
 80044c8:	2200      	movs	r2, #0
 80044ca:	3343      	adds	r3, #67	; 0x43
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	60a3      	str	r3, [r4, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	db58      	blt.n	8004588 <_printf_i+0x1b8>
 80044d6:	2204      	movs	r2, #4
 80044d8:	6821      	ldr	r1, [r4, #0]
 80044da:	4391      	bics	r1, r2
 80044dc:	6021      	str	r1, [r4, #0]
 80044de:	2800      	cmp	r0, #0
 80044e0:	d154      	bne.n	800458c <_printf_i+0x1bc>
 80044e2:	9d02      	ldr	r5, [sp, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d05a      	beq.n	800459e <_printf_i+0x1ce>
 80044e8:	0025      	movs	r5, r4
 80044ea:	7833      	ldrb	r3, [r6, #0]
 80044ec:	3542      	adds	r5, #66	; 0x42
 80044ee:	702b      	strb	r3, [r5, #0]
 80044f0:	e055      	b.n	800459e <_printf_i+0x1ce>
 80044f2:	0655      	lsls	r5, r2, #25
 80044f4:	d5db      	bpl.n	80044ae <_printf_i+0xde>
 80044f6:	b280      	uxth	r0, r0
 80044f8:	e7d9      	b.n	80044ae <_printf_i+0xde>
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	680d      	ldr	r5, [r1, #0]
 80044fe:	1d10      	adds	r0, r2, #4
 8004500:	6949      	ldr	r1, [r1, #20]
 8004502:	6018      	str	r0, [r3, #0]
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	062e      	lsls	r6, r5, #24
 8004508:	d501      	bpl.n	800450e <_printf_i+0x13e>
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e002      	b.n	8004514 <_printf_i+0x144>
 800450e:	066d      	lsls	r5, r5, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0x13a>
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	9d02      	ldr	r5, [sp, #8]
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	e04f      	b.n	80045bc <_printf_i+0x1ec>
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	1d11      	adds	r1, r2, #4
 8004520:	6019      	str	r1, [r3, #0]
 8004522:	6815      	ldr	r5, [r2, #0]
 8004524:	2100      	movs	r1, #0
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	0028      	movs	r0, r5
 800452a:	f000 f859 	bl	80045e0 <memchr>
 800452e:	2800      	cmp	r0, #0
 8004530:	d001      	beq.n	8004536 <_printf_i+0x166>
 8004532:	1b40      	subs	r0, r0, r5
 8004534:	6060      	str	r0, [r4, #4]
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	2300      	movs	r3, #0
 800453c:	9a02      	ldr	r2, [sp, #8]
 800453e:	7013      	strb	r3, [r2, #0]
 8004540:	e03c      	b.n	80045bc <_printf_i+0x1ec>
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	002a      	movs	r2, r5
 8004546:	9904      	ldr	r1, [sp, #16]
 8004548:	9803      	ldr	r0, [sp, #12]
 800454a:	9d05      	ldr	r5, [sp, #20]
 800454c:	47a8      	blx	r5
 800454e:	1c43      	adds	r3, r0, #1
 8004550:	d03e      	beq.n	80045d0 <_printf_i+0x200>
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	079b      	lsls	r3, r3, #30
 8004556:	d415      	bmi.n	8004584 <_printf_i+0x1b4>
 8004558:	9b07      	ldr	r3, [sp, #28]
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	4298      	cmp	r0, r3
 800455e:	da39      	bge.n	80045d4 <_printf_i+0x204>
 8004560:	0018      	movs	r0, r3
 8004562:	e037      	b.n	80045d4 <_printf_i+0x204>
 8004564:	0022      	movs	r2, r4
 8004566:	2301      	movs	r3, #1
 8004568:	3219      	adds	r2, #25
 800456a:	9904      	ldr	r1, [sp, #16]
 800456c:	9803      	ldr	r0, [sp, #12]
 800456e:	9e05      	ldr	r6, [sp, #20]
 8004570:	47b0      	blx	r6
 8004572:	1c43      	adds	r3, r0, #1
 8004574:	d02c      	beq.n	80045d0 <_printf_i+0x200>
 8004576:	3501      	adds	r5, #1
 8004578:	68e3      	ldr	r3, [r4, #12]
 800457a:	9a07      	ldr	r2, [sp, #28]
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	42ab      	cmp	r3, r5
 8004580:	dcf0      	bgt.n	8004564 <_printf_i+0x194>
 8004582:	e7e9      	b.n	8004558 <_printf_i+0x188>
 8004584:	2500      	movs	r5, #0
 8004586:	e7f7      	b.n	8004578 <_printf_i+0x1a8>
 8004588:	2800      	cmp	r0, #0
 800458a:	d0ad      	beq.n	80044e8 <_printf_i+0x118>
 800458c:	9d02      	ldr	r5, [sp, #8]
 800458e:	0039      	movs	r1, r7
 8004590:	f7fb fe40 	bl	8000214 <__aeabi_uidivmod>
 8004594:	5c73      	ldrb	r3, [r6, r1]
 8004596:	3d01      	subs	r5, #1
 8004598:	702b      	strb	r3, [r5, #0]
 800459a:	2800      	cmp	r0, #0
 800459c:	d1f7      	bne.n	800458e <_printf_i+0x1be>
 800459e:	2f08      	cmp	r7, #8
 80045a0:	d109      	bne.n	80045b6 <_printf_i+0x1e6>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	07db      	lsls	r3, r3, #31
 80045a6:	d506      	bpl.n	80045b6 <_printf_i+0x1e6>
 80045a8:	6863      	ldr	r3, [r4, #4]
 80045aa:	6922      	ldr	r2, [r4, #16]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	dc02      	bgt.n	80045b6 <_printf_i+0x1e6>
 80045b0:	2330      	movs	r3, #48	; 0x30
 80045b2:	3d01      	subs	r5, #1
 80045b4:	702b      	strb	r3, [r5, #0]
 80045b6:	9b02      	ldr	r3, [sp, #8]
 80045b8:	1b5b      	subs	r3, r3, r5
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	9b05      	ldr	r3, [sp, #20]
 80045be:	aa07      	add	r2, sp, #28
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	0021      	movs	r1, r4
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	9803      	ldr	r0, [sp, #12]
 80045c8:	f7ff fe94 	bl	80042f4 <_printf_common>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d1b8      	bne.n	8004542 <_printf_i+0x172>
 80045d0:	2001      	movs	r0, #1
 80045d2:	4240      	negs	r0, r0
 80045d4:	b009      	add	sp, #36	; 0x24
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	08004895 	.word	0x08004895
 80045dc:	080048a6 	.word	0x080048a6

080045e0 <memchr>:
 80045e0:	b2c9      	uxtb	r1, r1
 80045e2:	1882      	adds	r2, r0, r2
 80045e4:	4290      	cmp	r0, r2
 80045e6:	d101      	bne.n	80045ec <memchr+0xc>
 80045e8:	2000      	movs	r0, #0
 80045ea:	4770      	bx	lr
 80045ec:	7803      	ldrb	r3, [r0, #0]
 80045ee:	428b      	cmp	r3, r1
 80045f0:	d0fb      	beq.n	80045ea <memchr+0xa>
 80045f2:	3001      	adds	r0, #1
 80045f4:	e7f6      	b.n	80045e4 <memchr+0x4>

080045f6 <memcpy>:
 80045f6:	2300      	movs	r3, #0
 80045f8:	b510      	push	{r4, lr}
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d100      	bne.n	8004600 <memcpy+0xa>
 80045fe:	bd10      	pop	{r4, pc}
 8004600:	5ccc      	ldrb	r4, [r1, r3]
 8004602:	54c4      	strb	r4, [r0, r3]
 8004604:	3301      	adds	r3, #1
 8004606:	e7f8      	b.n	80045fa <memcpy+0x4>

08004608 <memmove>:
 8004608:	b510      	push	{r4, lr}
 800460a:	4288      	cmp	r0, r1
 800460c:	d902      	bls.n	8004614 <memmove+0xc>
 800460e:	188b      	adds	r3, r1, r2
 8004610:	4298      	cmp	r0, r3
 8004612:	d303      	bcc.n	800461c <memmove+0x14>
 8004614:	2300      	movs	r3, #0
 8004616:	e007      	b.n	8004628 <memmove+0x20>
 8004618:	5c8b      	ldrb	r3, [r1, r2]
 800461a:	5483      	strb	r3, [r0, r2]
 800461c:	3a01      	subs	r2, #1
 800461e:	d2fb      	bcs.n	8004618 <memmove+0x10>
 8004620:	bd10      	pop	{r4, pc}
 8004622:	5ccc      	ldrb	r4, [r1, r3]
 8004624:	54c4      	strb	r4, [r0, r3]
 8004626:	3301      	adds	r3, #1
 8004628:	429a      	cmp	r2, r3
 800462a:	d1fa      	bne.n	8004622 <memmove+0x1a>
 800462c:	e7f8      	b.n	8004620 <memmove+0x18>
	...

08004630 <_free_r>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	0005      	movs	r5, r0
 8004634:	2900      	cmp	r1, #0
 8004636:	d010      	beq.n	800465a <_free_r+0x2a>
 8004638:	1f0c      	subs	r4, r1, #4
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da00      	bge.n	8004642 <_free_r+0x12>
 8004640:	18e4      	adds	r4, r4, r3
 8004642:	0028      	movs	r0, r5
 8004644:	f000 f8d4 	bl	80047f0 <__malloc_lock>
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <_free_r+0x90>)
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <_free_r+0x2c>
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6014      	str	r4, [r2, #0]
 8004654:	0028      	movs	r0, r5
 8004656:	f000 f8cc 	bl	80047f2 <__malloc_unlock>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	42a3      	cmp	r3, r4
 800465e:	d909      	bls.n	8004674 <_free_r+0x44>
 8004660:	6821      	ldr	r1, [r4, #0]
 8004662:	1860      	adds	r0, r4, r1
 8004664:	4283      	cmp	r3, r0
 8004666:	d1f3      	bne.n	8004650 <_free_r+0x20>
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	1841      	adds	r1, r0, r1
 800466e:	6021      	str	r1, [r4, #0]
 8004670:	e7ee      	b.n	8004650 <_free_r+0x20>
 8004672:	0013      	movs	r3, r2
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	2a00      	cmp	r2, #0
 8004678:	d001      	beq.n	800467e <_free_r+0x4e>
 800467a:	42a2      	cmp	r2, r4
 800467c:	d9f9      	bls.n	8004672 <_free_r+0x42>
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	1858      	adds	r0, r3, r1
 8004682:	42a0      	cmp	r0, r4
 8004684:	d10b      	bne.n	800469e <_free_r+0x6e>
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	1809      	adds	r1, r1, r0
 800468a:	1858      	adds	r0, r3, r1
 800468c:	6019      	str	r1, [r3, #0]
 800468e:	4282      	cmp	r2, r0
 8004690:	d1e0      	bne.n	8004654 <_free_r+0x24>
 8004692:	6810      	ldr	r0, [r2, #0]
 8004694:	6852      	ldr	r2, [r2, #4]
 8004696:	1841      	adds	r1, r0, r1
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e7da      	b.n	8004654 <_free_r+0x24>
 800469e:	42a0      	cmp	r0, r4
 80046a0:	d902      	bls.n	80046a8 <_free_r+0x78>
 80046a2:	230c      	movs	r3, #12
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	e7d5      	b.n	8004654 <_free_r+0x24>
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	1860      	adds	r0, r4, r1
 80046ac:	4282      	cmp	r2, r0
 80046ae:	d103      	bne.n	80046b8 <_free_r+0x88>
 80046b0:	6810      	ldr	r0, [r2, #0]
 80046b2:	6852      	ldr	r2, [r2, #4]
 80046b4:	1841      	adds	r1, r0, r1
 80046b6:	6021      	str	r1, [r4, #0]
 80046b8:	6062      	str	r2, [r4, #4]
 80046ba:	605c      	str	r4, [r3, #4]
 80046bc:	e7ca      	b.n	8004654 <_free_r+0x24>
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000240 	.word	0x20000240

080046c4 <_malloc_r>:
 80046c4:	2303      	movs	r3, #3
 80046c6:	b570      	push	{r4, r5, r6, lr}
 80046c8:	1ccd      	adds	r5, r1, #3
 80046ca:	439d      	bics	r5, r3
 80046cc:	3508      	adds	r5, #8
 80046ce:	0006      	movs	r6, r0
 80046d0:	2d0c      	cmp	r5, #12
 80046d2:	d21e      	bcs.n	8004712 <_malloc_r+0x4e>
 80046d4:	250c      	movs	r5, #12
 80046d6:	42a9      	cmp	r1, r5
 80046d8:	d81d      	bhi.n	8004716 <_malloc_r+0x52>
 80046da:	0030      	movs	r0, r6
 80046dc:	f000 f888 	bl	80047f0 <__malloc_lock>
 80046e0:	4a25      	ldr	r2, [pc, #148]	; (8004778 <_malloc_r+0xb4>)
 80046e2:	6814      	ldr	r4, [r2, #0]
 80046e4:	0021      	movs	r1, r4
 80046e6:	2900      	cmp	r1, #0
 80046e8:	d119      	bne.n	800471e <_malloc_r+0x5a>
 80046ea:	4c24      	ldr	r4, [pc, #144]	; (800477c <_malloc_r+0xb8>)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <_malloc_r+0x36>
 80046f2:	0030      	movs	r0, r6
 80046f4:	f000 f86a 	bl	80047cc <_sbrk_r>
 80046f8:	6020      	str	r0, [r4, #0]
 80046fa:	0029      	movs	r1, r5
 80046fc:	0030      	movs	r0, r6
 80046fe:	f000 f865 	bl	80047cc <_sbrk_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	d12b      	bne.n	800475e <_malloc_r+0x9a>
 8004706:	230c      	movs	r3, #12
 8004708:	0030      	movs	r0, r6
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f000 f871 	bl	80047f2 <__malloc_unlock>
 8004710:	e003      	b.n	800471a <_malloc_r+0x56>
 8004712:	2d00      	cmp	r5, #0
 8004714:	dadf      	bge.n	80046d6 <_malloc_r+0x12>
 8004716:	230c      	movs	r3, #12
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	2000      	movs	r0, #0
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	680b      	ldr	r3, [r1, #0]
 8004720:	1b5b      	subs	r3, r3, r5
 8004722:	d419      	bmi.n	8004758 <_malloc_r+0x94>
 8004724:	2b0b      	cmp	r3, #11
 8004726:	d903      	bls.n	8004730 <_malloc_r+0x6c>
 8004728:	600b      	str	r3, [r1, #0]
 800472a:	18cc      	adds	r4, r1, r3
 800472c:	6025      	str	r5, [r4, #0]
 800472e:	e003      	b.n	8004738 <_malloc_r+0x74>
 8004730:	684b      	ldr	r3, [r1, #4]
 8004732:	428c      	cmp	r4, r1
 8004734:	d10d      	bne.n	8004752 <_malloc_r+0x8e>
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	0030      	movs	r0, r6
 800473a:	f000 f85a 	bl	80047f2 <__malloc_unlock>
 800473e:	0020      	movs	r0, r4
 8004740:	2207      	movs	r2, #7
 8004742:	300b      	adds	r0, #11
 8004744:	1d23      	adds	r3, r4, #4
 8004746:	4390      	bics	r0, r2
 8004748:	1ac3      	subs	r3, r0, r3
 800474a:	d0e7      	beq.n	800471c <_malloc_r+0x58>
 800474c:	425a      	negs	r2, r3
 800474e:	50e2      	str	r2, [r4, r3]
 8004750:	e7e4      	b.n	800471c <_malloc_r+0x58>
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	000c      	movs	r4, r1
 8004756:	e7ef      	b.n	8004738 <_malloc_r+0x74>
 8004758:	000c      	movs	r4, r1
 800475a:	6849      	ldr	r1, [r1, #4]
 800475c:	e7c3      	b.n	80046e6 <_malloc_r+0x22>
 800475e:	2303      	movs	r3, #3
 8004760:	1cc4      	adds	r4, r0, #3
 8004762:	439c      	bics	r4, r3
 8004764:	42a0      	cmp	r0, r4
 8004766:	d0e1      	beq.n	800472c <_malloc_r+0x68>
 8004768:	1a21      	subs	r1, r4, r0
 800476a:	0030      	movs	r0, r6
 800476c:	f000 f82e 	bl	80047cc <_sbrk_r>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d1db      	bne.n	800472c <_malloc_r+0x68>
 8004774:	e7c7      	b.n	8004706 <_malloc_r+0x42>
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	20000240 	.word	0x20000240
 800477c:	20000244 	.word	0x20000244

08004780 <_realloc_r>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	0007      	movs	r7, r0
 8004784:	000d      	movs	r5, r1
 8004786:	0016      	movs	r6, r2
 8004788:	2900      	cmp	r1, #0
 800478a:	d105      	bne.n	8004798 <_realloc_r+0x18>
 800478c:	0011      	movs	r1, r2
 800478e:	f7ff ff99 	bl	80046c4 <_malloc_r>
 8004792:	0004      	movs	r4, r0
 8004794:	0020      	movs	r0, r4
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	2a00      	cmp	r2, #0
 800479a:	d103      	bne.n	80047a4 <_realloc_r+0x24>
 800479c:	f7ff ff48 	bl	8004630 <_free_r>
 80047a0:	0034      	movs	r4, r6
 80047a2:	e7f7      	b.n	8004794 <_realloc_r+0x14>
 80047a4:	f000 f826 	bl	80047f4 <_malloc_usable_size_r>
 80047a8:	002c      	movs	r4, r5
 80047aa:	42b0      	cmp	r0, r6
 80047ac:	d2f2      	bcs.n	8004794 <_realloc_r+0x14>
 80047ae:	0031      	movs	r1, r6
 80047b0:	0038      	movs	r0, r7
 80047b2:	f7ff ff87 	bl	80046c4 <_malloc_r>
 80047b6:	1e04      	subs	r4, r0, #0
 80047b8:	d0ec      	beq.n	8004794 <_realloc_r+0x14>
 80047ba:	0029      	movs	r1, r5
 80047bc:	0032      	movs	r2, r6
 80047be:	f7ff ff1a 	bl	80045f6 <memcpy>
 80047c2:	0029      	movs	r1, r5
 80047c4:	0038      	movs	r0, r7
 80047c6:	f7ff ff33 	bl	8004630 <_free_r>
 80047ca:	e7e3      	b.n	8004794 <_realloc_r+0x14>

080047cc <_sbrk_r>:
 80047cc:	2300      	movs	r3, #0
 80047ce:	b570      	push	{r4, r5, r6, lr}
 80047d0:	4c06      	ldr	r4, [pc, #24]	; (80047ec <_sbrk_r+0x20>)
 80047d2:	0005      	movs	r5, r0
 80047d4:	0008      	movs	r0, r1
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	f7fc fd1e 	bl	8001218 <_sbrk>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d103      	bne.n	80047e8 <_sbrk_r+0x1c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d000      	beq.n	80047e8 <_sbrk_r+0x1c>
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	2000024c 	.word	0x2000024c

080047f0 <__malloc_lock>:
 80047f0:	4770      	bx	lr

080047f2 <__malloc_unlock>:
 80047f2:	4770      	bx	lr

080047f4 <_malloc_usable_size_r>:
 80047f4:	1f0b      	subs	r3, r1, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1f18      	subs	r0, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da01      	bge.n	8004802 <_malloc_usable_size_r+0xe>
 80047fe:	580b      	ldr	r3, [r1, r0]
 8004800:	18c0      	adds	r0, r0, r3
 8004802:	4770      	bx	lr

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
